import { trigger, style, animate, transition } from '@angular/animations';
import { Injectable, Component, ElementRef, EventEmitter, Inject, Input, ViewChild, ViewEncapsulation, TemplateRef, Optional, Output, NgZone, Directive, ViewContainerRef, HostListener, NgModule } from '@angular/core';
import { Subject, merge, of } from 'rxjs';
import { DOCUMENT, CommonModule } from '@angular/common';
import { FocusTrapFactory, A11yModule } from '@angular/cdk/a11y';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { ConnectionPositionPair, Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';
import { Directionality, BidiModule } from '@angular/cdk/bidi';
import { ESCAPE } from '@angular/cdk/keycodes';
import { TemplatePortal } from '@angular/cdk/portal';
import { takeUntil, take, filter, tap, delay, switchMap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/a11y';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/cdk/overlay';
import * as ɵngcc4 from '@angular/cdk/bidi';

const _c0 = ["focusTrapElement"];
function SatPopover_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
    ɵngcc0.ɵɵlistener("@transformPopover.done", function SatPopover_ng_template_0_Template_div_animation_transformPopover_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2._onAnimationDone($event); });
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0._classList)("@transformPopover", ctx_r0._getAnimation());
} }
const _c1 = ["*"];
const transformPopover = trigger('transformPopover', [
    transition(':enter', [
        style({ opacity: 0, transform: 'scale(0.3)' }),
        animate('{{openTransition}}', style({ opacity: 1, transform: 'scale(1)' }))
    ]),
    transition(':leave', [
        animate('{{closeTransition}}', style({ opacity: 0, transform: 'scale(0.5)' }))
    ])
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {number} */
const NotificationAction = {
    /** Popover should open. */
    OPEN: 0,
    /** Popover should close. */
    CLOSE: 1,
    /** Popover should toggle open or closed. */
    TOGGLE: 2,
    /** Popover has new target positions. */
    REPOSITION: 3,
    /** Popover needs new configuration. */
    UPDATE_CONFIG: 4,
    /** Popover should realign itself to the anchor.  */
    REALIGN: 5,
};
NotificationAction[NotificationAction.OPEN] = 'OPEN';
NotificationAction[NotificationAction.CLOSE] = 'CLOSE';
NotificationAction[NotificationAction.TOGGLE] = 'TOGGLE';
NotificationAction[NotificationAction.REPOSITION] = 'REPOSITION';
NotificationAction[NotificationAction.UPDATE_CONFIG] = 'UPDATE_CONFIG';
NotificationAction[NotificationAction.REALIGN] = 'REALIGN';
/**
 * Event object for dispatching to anchoring service.
 */
class PopoverNotification {
    /**
     * @param {?} action
     * @param {?=} value
     */
    constructor(action, value) {
        this.action = action;
        this.value = value;
    }
}
class PopoverNotificationService {
    constructor() {
        this.store = new Subject();
    }
    /**
     * Dispatch a notification to all subscribers.
     * @param {?} notification
     * @return {?}
     */
    dispatch(notification) {
        this.store.next(notification);
    }
    /**
     * Stream of notification events.
     * @return {?}
     */
    events() {
        return this.store.asObservable();
    }
    /**
     * Complete event stream.
     * @return {?}
     */
    dispose() {
        this.store.complete();
    }
}
PopoverNotificationService.ɵfac = function PopoverNotificationService_Factory(t) { return new (t || PopoverNotificationService)(); };
PopoverNotificationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PopoverNotificationService, factory: PopoverNotificationService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PopoverNotificationService, [{
        type: Injectable
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const VALID_SCROLL = [
    'noop',
    'block',
    'reposition',
    'close'
];
/** @type {?} */
const VALID_HORIZ_ALIGN = [
    'before',
    'start',
    'center',
    'end',
    'after'
];
/** @type {?} */
const VALID_VERT_ALIGN = [
    'above',
    'start',
    'center',
    'end',
    'below'
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function getInvalidPopoverError() {
    return Error('SatPopoverAnchor must be provided an SatPopover component instance.');
}
/**
 * @return {?}
 */
function getUnanchoredPopoverError() {
    return Error('SatPopover is not anchored to any SatPopoverAnchor.');
}
/**
 * @param {?} alignment
 * @return {?}
 */
function getInvalidHorizontalAlignError(alignment) {
    return Error(generateGenericError('horizontalAlign/xAlign', alignment, VALID_HORIZ_ALIGN));
}
/**
 * @param {?} alignment
 * @return {?}
 */
function getInvalidVerticalAlignError(alignment) {
    return Error(generateGenericError('verticalAlign/yAlign', alignment, VALID_VERT_ALIGN));
}
/**
 * @param {?} strategy
 * @return {?}
 */
function getInvalidScrollStrategyError(strategy) {
    return Error(generateGenericError('scrollStrategy', strategy, VALID_SCROLL));
}
/**
 * @param {?} apiName
 * @param {?} invalid
 * @param {?} valid
 * @return {?}
 */
function generateGenericError(apiName, invalid, valid) {
    return `Invalid ${apiName}: '${invalid}'. Valid options are ` +
        `${valid.map(v => `'${v}'`).join(', ')}.`;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
// See http://cubic-bezier.com/#.25,.8,.25,1 for reference.
/** @type {?} */
const DEFAULT_TRANSITION = '200ms cubic-bezier(0.25, 0.8, 0.25, 1)';
class SatPopover {
    /**
     * @param {?} _focusTrapFactory
     * @param {?} _document
     */
    constructor(_focusTrapFactory, _document) {
        this._focusTrapFactory = _focusTrapFactory;
        this._document = _document;
        this._horizontalAlign = 'center';
        this._verticalAlign = 'center';
        this._forceAlignment = false;
        this._lockAlignment = false;
        this._autoFocus = true;
        this._autoFocusOverride = true;
        this._restoreFocus = true;
        this._restoreFocusOverride = true;
        this._scrollStrategy = 'reposition';
        this._hasBackdrop = false;
        this._interactiveClose = true;
        this._openTransition = DEFAULT_TRANSITION;
        this._closeTransition = DEFAULT_TRANSITION;
        /**
         * Optional backdrop class.
         */
        this.backdropClass = '';
        /**
         * Emits when the popover is opened.
         */
        this.opened = new EventEmitter();
        /**
         * Emits when the popover is closed.
         */
        this.closed = new EventEmitter();
        /**
         * Emits when the popover has finished opening.
         */
        this.afterOpen = new EventEmitter();
        /**
         * Emits when the popover has finished closing.
         */
        this.afterClose = new EventEmitter();
        /**
         * Emits when the backdrop is clicked.
         */
        this.backdropClicked = new EventEmitter();
        /**
         * Emits when a keydown event is targeted to this popover's overlay.
         */
        this.overlayKeydown = new EventEmitter();
        /**
         * Classes to be added to the popover for setting the correct transform origin.
         */
        this._classList = {};
        /**
         * Whether the popover is presently open.
         */
        this._open = false;
    }
    /**
     * Alignment of the popover on the horizontal axis.
     * @return {?}
     */
    get horizontalAlign() { return this._horizontalAlign; }
    /**
     * @param {?} val
     * @return {?}
     */
    set horizontalAlign(val) {
        this._validateHorizontalAlign(val);
        if (this._horizontalAlign !== val) {
            this._horizontalAlign = val;
            this._dispatchConfigNotification(new PopoverNotification(NotificationAction.REPOSITION));
        }
    }
    /**
     * Alignment of the popover on the x axis. Alias for `horizontalAlign`.
     * @return {?}
     */
    get xAlign() { return this.horizontalAlign; }
    /**
     * @param {?} val
     * @return {?}
     */
    set xAlign(val) { this.horizontalAlign = val; }
    /**
     * Alignment of the popover on the vertical axis.
     * @return {?}
     */
    get verticalAlign() { return this._verticalAlign; }
    /**
     * @param {?} val
     * @return {?}
     */
    set verticalAlign(val) {
        this._validateVerticalAlign(val);
        if (this._verticalAlign !== val) {
            this._verticalAlign = val;
            this._dispatchConfigNotification(new PopoverNotification(NotificationAction.REPOSITION));
        }
    }
    /**
     * Alignment of the popover on the y axis. Alias for `verticalAlign`.
     * @return {?}
     */
    get yAlign() { return this.verticalAlign; }
    /**
     * @param {?} val
     * @return {?}
     */
    set yAlign(val) { this.verticalAlign = val; }
    /**
     * Whether the popover always opens with the specified alignment.
     * @return {?}
     */
    get forceAlignment() { return this._forceAlignment; }
    /**
     * @param {?} val
     * @return {?}
     */
    set forceAlignment(val) {
        /** @type {?} */
        const coercedVal = coerceBooleanProperty(val);
        if (this._forceAlignment !== coercedVal) {
            this._forceAlignment = coercedVal;
            this._dispatchConfigNotification(new PopoverNotification(NotificationAction.REPOSITION));
        }
    }
    /**
     * Whether the popover's alignment is locked after opening. This prevents the popover
     * from changing its alignement when scrolling or changing the size of the viewport.
     * @return {?}
     */
    get lockAlignment() { return this._lockAlignment; }
    /**
     * @param {?} val
     * @return {?}
     */
    set lockAlignment(val) {
        /** @type {?} */
        const coercedVal = coerceBooleanProperty(val);
        if (this._lockAlignment !== coercedVal) {
            this._lockAlignment = coerceBooleanProperty(val);
            this._dispatchConfigNotification(new PopoverNotification(NotificationAction.REPOSITION));
        }
    }
    /**
     * Whether the first focusable element should be focused on open.
     * @return {?}
     */
    get autoFocus() { return this._autoFocus && this._autoFocusOverride; }
    /**
     * @param {?} val
     * @return {?}
     */
    set autoFocus(val) {
        this._autoFocus = coerceBooleanProperty(val);
    }
    /**
     * Whether the popover should return focus to the previously focused element after closing.
     * @return {?}
     */
    get restoreFocus() { return this._restoreFocus && this._restoreFocusOverride; }
    /**
     * @param {?} val
     * @return {?}
     */
    set restoreFocus(val) {
        this._restoreFocus = coerceBooleanProperty(val);
    }
    /**
     * How the popover should handle scrolling.
     * @return {?}
     */
    get scrollStrategy() { return this._scrollStrategy; }
    /**
     * @param {?} val
     * @return {?}
     */
    set scrollStrategy(val) {
        this._validateScrollStrategy(val);
        if (this._scrollStrategy !== val) {
            this._scrollStrategy = val;
            this._dispatchConfigNotification(new PopoverNotification(NotificationAction.UPDATE_CONFIG));
        }
    }
    /**
     * Whether the popover should have a backdrop (includes closing on click).
     * @return {?}
     */
    get hasBackdrop() { return this._hasBackdrop; }
    /**
     * @param {?} val
     * @return {?}
     */
    set hasBackdrop(val) {
        this._hasBackdrop = coerceBooleanProperty(val);
    }
    /**
     * Whether the popover should close when the user clicks the backdrop or presses ESC.
     * @return {?}
     */
    get interactiveClose() { return this._interactiveClose; }
    /**
     * @param {?} val
     * @return {?}
     */
    set interactiveClose(val) {
        this._interactiveClose = coerceBooleanProperty(val);
    }
    /**
     * Custom transition to use while opening.
     * @return {?}
     */
    get openTransition() { return this._openTransition; }
    /**
     * @param {?} val
     * @return {?}
     */
    set openTransition(val) {
        if (val) {
            this._openTransition = val;
        }
    }
    /**
     * Custom transition to use while closing.
     * @return {?}
     */
    get closeTransition() { return this._closeTransition; }
    /**
     * @param {?} val
     * @return {?}
     */
    set closeTransition(val) {
        if (val) {
            this._closeTransition = val;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._setAlignmentClasses();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._notifications) {
            this._notifications.dispose();
        }
    }
    /**
     * Open this popover.
     * @param {?=} options
     * @return {?}
     */
    open(options = {}) {
        /** @type {?} */
        const notification = new PopoverNotification(NotificationAction.OPEN, options);
        this._dispatchActionNotification(notification);
    }
    /**
     * Close this popover.
     * @param {?=} value
     * @return {?}
     */
    close(value) {
        /** @type {?} */
        const notification = new PopoverNotification(NotificationAction.CLOSE, value);
        this._dispatchActionNotification(notification);
    }
    /**
     * Toggle this popover open or closed.
     * @return {?}
     */
    toggle() {
        /** @type {?} */
        const notification = new PopoverNotification(NotificationAction.TOGGLE);
        this._dispatchActionNotification(notification);
    }
    /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    realign() {
        /** @type {?} */
        const notification = new PopoverNotification(NotificationAction.REALIGN);
        this._dispatchActionNotification(notification);
    }
    /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    isOpen() {
        return this._open;
    }
    /**
     * Gets an animation config with customized (or default) transition values.
     * @return {?}
     */
    _getAnimation() {
        return {
            value: 'visible',
            params: { openTransition: this.openTransition, closeTransition: this.closeTransition }
        };
    }
    /**
     * Callback for when the popover is finished animating in or out.
     * @param {?} event
     * @return {?}
     */
    _onAnimationDone(event) {
        if (event.toState === 'visible') {
            this._trapFocus();
            this.afterOpen.emit();
        }
        else if (event.toState === 'void') {
            this._restoreFocusAndDestroyTrap();
            this.afterClose.emit();
        }
    }
    /**
     * Apply alignment classes based on alignment inputs.
     * @param {?=} horizAlign
     * @param {?=} vertAlign
     * @return {?}
     */
    _setAlignmentClasses(horizAlign = this.horizontalAlign, vertAlign = this.verticalAlign) {
        this._classList['sat-popover-before'] = horizAlign === 'before' || horizAlign === 'end';
        this._classList['sat-popover-after'] = horizAlign === 'after' || horizAlign === 'start';
        this._classList['sat-popover-above'] = vertAlign === 'above' || vertAlign === 'end';
        this._classList['sat-popover-below'] = vertAlign === 'below' || vertAlign === 'start';
        this._classList['sat-popover-center'] = horizAlign === 'center' || vertAlign === 'center';
    }
    /**
     * Move the focus inside the focus trap and remember where to return later.
     * @return {?}
     */
    _trapFocus() {
        this._savePreviouslyFocusedElement();
        // There won't be a focus trap element if the close animation starts before open finishes
        if (!this._focusTrapElement) {
            return;
        }
        if (!this._focusTrap && this._focusTrapElement) {
            this._focusTrap = this._focusTrapFactory.create(this._focusTrapElement.nativeElement);
        }
        if (this.autoFocus) {
            this._focusTrap.focusInitialElementWhenReady();
        }
    }
    /**
     * Restore focus to the element focused before the popover opened. Also destroy trap.
     * @return {?}
     */
    _restoreFocusAndDestroyTrap() {
        /** @type {?} */
        const toFocus = this._previouslyFocusedElement;
        // Must check active element is focusable for IE sake
        if (toFocus && 'focus' in toFocus && this.restoreFocus) {
            this._previouslyFocusedElement.focus();
        }
        this._previouslyFocusedElement = null;
        if (this._focusTrap) {
            this._focusTrap.destroy();
            this._focusTrap = undefined;
        }
    }
    /**
     * Save a reference to the element focused before the popover was opened.
     * @return {?}
     */
    _savePreviouslyFocusedElement() {
        if (this._document) {
            this._previouslyFocusedElement = (/** @type {?} */ (this._document.activeElement));
        }
    }
    /**
     * Dispatch a notification to the notification service, if possible.
     * @param {?} notification
     * @return {?}
     */
    _dispatchConfigNotification(notification) {
        if (this._notifications) {
            this._notifications.dispatch(notification);
        }
    }
    /**
     * Dispatch a notification to the notification service and throw if unable to.
     * @param {?} notification
     * @return {?}
     */
    _dispatchActionNotification(notification) {
        if (!this._notifications) {
            throw getUnanchoredPopoverError();
        }
        this._notifications.dispatch(notification);
    }
    /**
     * Throws an error if the alignment is not a valid horizontalAlign.
     * @param {?} pos
     * @return {?}
     */
    _validateHorizontalAlign(pos) {
        if (VALID_HORIZ_ALIGN.indexOf(pos) === -1) {
            throw getInvalidHorizontalAlignError(pos);
        }
    }
    /**
     * Throws an error if the alignment is not a valid verticalAlign.
     * @param {?} pos
     * @return {?}
     */
    _validateVerticalAlign(pos) {
        if (VALID_VERT_ALIGN.indexOf(pos) === -1) {
            throw getInvalidVerticalAlignError(pos);
        }
    }
    /**
     * Throws an error if the scroll strategy is not a valid strategy.
     * @param {?} strategy
     * @return {?}
     */
    _validateScrollStrategy(strategy) {
        if (VALID_SCROLL.indexOf(strategy) === -1) {
            throw getInvalidScrollStrategyError(strategy);
        }
    }
}
SatPopover.ɵfac = function SatPopover_Factory(t) { return new (t || SatPopover)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };
SatPopover.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SatPopover, selectors: [["sat-popover"]], viewQuery: function SatPopover_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(TemplateRef, true);
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._templateRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._focusTrapElement = _t.first);
    } }, inputs: { backdropClass: "backdropClass", horizontalAlign: "horizontalAlign", xAlign: "xAlign", verticalAlign: "verticalAlign", yAlign: "yAlign", forceAlignment: "forceAlignment", lockAlignment: "lockAlignment", autoFocus: "autoFocus", restoreFocus: "restoreFocus", scrollStrategy: "scrollStrategy", hasBackdrop: "hasBackdrop", interactiveClose: "interactiveClose", openTransition: "openTransition", closeTransition: "closeTransition" }, outputs: { opened: "opened", closed: "closed", afterOpen: "afterOpen", afterClose: "afterClose", backdropClicked: "backdropClicked", overlayKeydown: "overlayKeydown" }, ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[1, "sat-popover-container", 3, "ngClass"], ["focusTrapElement", ""]], template: function SatPopover_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, SatPopover_ng_template_0_Template, 3, 2, "ng-template");
    } }, directives: [ɵngcc2.NgClass], styles: [".cdk-global-overlay-wrapper,.cdk-overlay-container{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{position:fixed;z-index:1000}.cdk-overlay-container:empty{display:none}.cdk-global-overlay-wrapper{display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:1000;display:flex;max-width:100%;max-height:100%}.cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;-webkit-tap-highlight-color:transparent;transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:1}@media screen and (-ms-high-contrast:active){.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.6}}.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.32)}.cdk-overlay-transparent-backdrop,.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{opacity:0}.cdk-overlay-connected-position-bounding-box{position:absolute;z-index:1000;display:flex;flex-direction:column;min-width:1px;min-height:1px}.cdk-global-scrollblock{position:fixed;width:100%;overflow-y:scroll}.sat-popover-container.sat-popover-before.sat-popover-above{-webkit-transform-origin:right bottom;transform-origin:right bottom}[dir=rtl] .sat-popover-container.sat-popover-before.sat-popover-above{-webkit-transform-origin:left bottom;transform-origin:left bottom}.sat-popover-container.sat-popover-before.sat-popover-center{-webkit-transform-origin:right center;transform-origin:right center}[dir=rtl] .sat-popover-container.sat-popover-before.sat-popover-center{-webkit-transform-origin:left center;transform-origin:left center}.sat-popover-container.sat-popover-before.sat-popover-below{-webkit-transform-origin:right top;transform-origin:right top}[dir=rtl] .sat-popover-container.sat-popover-before.sat-popover-below{-webkit-transform-origin:left top;transform-origin:left top}.sat-popover-container.sat-popover-center.sat-popover-above{-webkit-transform-origin:center bottom;transform-origin:center bottom}.sat-popover-container.sat-popover-center.sat-popover-below{-webkit-transform-origin:center top;transform-origin:center top}.sat-popover-container.sat-popover-after.sat-popover-above{-webkit-transform-origin:left bottom;transform-origin:left bottom}[dir=rtl] .sat-popover-container.sat-popover-after.sat-popover-above{-webkit-transform-origin:right bottom;transform-origin:right bottom}.sat-popover-container.sat-popover-after.sat-popover-center{-webkit-transform-origin:left center;transform-origin:left center}[dir=rtl] .sat-popover-container.sat-popover-after.sat-popover-center{-webkit-transform-origin:right center;transform-origin:right center}.sat-popover-container.sat-popover-after.sat-popover-below{-webkit-transform-origin:left top;transform-origin:left top}[dir=rtl] .sat-popover-container.sat-popover-after.sat-popover-below{-webkit-transform-origin:right top;transform-origin:right top}"], encapsulation: 2, data: { animation: [transformPopover] } });
/** @nocollapse */
SatPopover.ctorParameters = () => [
    { type: FocusTrapFactory },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
SatPopover.propDecorators = {
    horizontalAlign: [{ type: Input }],
    xAlign: [{ type: Input }],
    verticalAlign: [{ type: Input }],
    yAlign: [{ type: Input }],
    forceAlignment: [{ type: Input }],
    lockAlignment: [{ type: Input }],
    autoFocus: [{ type: Input }],
    restoreFocus: [{ type: Input }],
    scrollStrategy: [{ type: Input }],
    hasBackdrop: [{ type: Input }],
    interactiveClose: [{ type: Input }],
    openTransition: [{ type: Input }],
    closeTransition: [{ type: Input }],
    backdropClass: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    afterOpen: [{ type: Output }],
    afterClose: [{ type: Output }],
    backdropClicked: [{ type: Output }],
    overlayKeydown: [{ type: Output }],
    _templateRef: [{ type: ViewChild, args: [TemplateRef,] }],
    _focusTrapElement: [{ type: ViewChild, args: ['focusTrapElement',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SatPopover, [{
        type: Component,
        args: [{
                selector: 'sat-popover',
                encapsulation: ViewEncapsulation.None,
                animations: [transformPopover],
                template: "<ng-template>\n  <div class=\"sat-popover-container\"\n      #focusTrapElement\n      [ngClass]=\"_classList\"\n      [@transformPopover]=\"_getAnimation()\"\n      (@transformPopover.done)=\"_onAnimationDone($event)\">\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n",
                styles: [".cdk-global-overlay-wrapper,.cdk-overlay-container{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{position:fixed;z-index:1000}.cdk-overlay-container:empty{display:none}.cdk-global-overlay-wrapper{display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:1000;display:flex;max-width:100%;max-height:100%}.cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;-webkit-tap-highlight-color:transparent;transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:1}@media screen and (-ms-high-contrast:active){.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.6}}.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.32)}.cdk-overlay-transparent-backdrop,.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{opacity:0}.cdk-overlay-connected-position-bounding-box{position:absolute;z-index:1000;display:flex;flex-direction:column;min-width:1px;min-height:1px}.cdk-global-scrollblock{position:fixed;width:100%;overflow-y:scroll}.sat-popover-container.sat-popover-before.sat-popover-above{-webkit-transform-origin:right bottom;transform-origin:right bottom}[dir=rtl] .sat-popover-container.sat-popover-before.sat-popover-above{-webkit-transform-origin:left bottom;transform-origin:left bottom}.sat-popover-container.sat-popover-before.sat-popover-center{-webkit-transform-origin:right center;transform-origin:right center}[dir=rtl] .sat-popover-container.sat-popover-before.sat-popover-center{-webkit-transform-origin:left center;transform-origin:left center}.sat-popover-container.sat-popover-before.sat-popover-below{-webkit-transform-origin:right top;transform-origin:right top}[dir=rtl] .sat-popover-container.sat-popover-before.sat-popover-below{-webkit-transform-origin:left top;transform-origin:left top}.sat-popover-container.sat-popover-center.sat-popover-above{-webkit-transform-origin:center bottom;transform-origin:center bottom}.sat-popover-container.sat-popover-center.sat-popover-below{-webkit-transform-origin:center top;transform-origin:center top}.sat-popover-container.sat-popover-after.sat-popover-above{-webkit-transform-origin:left bottom;transform-origin:left bottom}[dir=rtl] .sat-popover-container.sat-popover-after.sat-popover-above{-webkit-transform-origin:right bottom;transform-origin:right bottom}.sat-popover-container.sat-popover-after.sat-popover-center{-webkit-transform-origin:left center;transform-origin:left center}[dir=rtl] .sat-popover-container.sat-popover-after.sat-popover-center{-webkit-transform-origin:right center;transform-origin:right center}.sat-popover-container.sat-popover-after.sat-popover-below{-webkit-transform-origin:left top;transform-origin:left top}[dir=rtl] .sat-popover-container.sat-popover-after.sat-popover-below{-webkit-transform-origin:right top;transform-origin:right top}"]
            }]
    }], function () { return [{ type: ɵngcc1.FocusTrapFactory }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { backdropClass: [{
            type: Input
        }], opened: [{
            type: Output
        }], closed: [{
            type: Output
        }], afterOpen: [{
            type: Output
        }], afterClose: [{
            type: Output
        }], backdropClicked: [{
            type: Output
        }], overlayKeydown: [{
            type: Output
        }], horizontalAlign: [{
            type: Input
        }], xAlign: [{
            type: Input
        }], verticalAlign: [{
            type: Input
        }], yAlign: [{
            type: Input
        }], forceAlignment: [{
            type: Input
        }], lockAlignment: [{
            type: Input
        }], autoFocus: [{
            type: Input
        }], restoreFocus: [{
            type: Input
        }], scrollStrategy: [{
            type: Input
        }], hasBackdrop: [{
            type: Input
        }], interactiveClose: [{
            type: Input
        }], openTransition: [{
            type: Input
        }], closeTransition: [{
            type: Input
        }], _templateRef: [{
            type: ViewChild,
            args: [TemplateRef]
        }], _focusTrapElement: [{
            type: ViewChild,
            args: ['focusTrapElement']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class SatPopoverAnchoringService {
    /**
     * @param {?} _overlay
     * @param {?} _ngZone
     * @param {?} _dir
     */
    constructor(_overlay, _ngZone, _dir) {
        this._overlay = _overlay;
        this._ngZone = _ngZone;
        this._dir = _dir;
        /**
         * Emits when the popover is opened.
         */
        this.popoverOpened = new Subject();
        /**
         * Emits when the popover is closed.
         */
        this.popoverClosed = new Subject();
        /**
         * Whether the popover is presently open.
         */
        this._popoverOpen = false;
        /**
         * Emits when the service is destroyed.
         */
        this._onDestroy = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // Destroy popover before terminating subscriptions so that any resulting
        // detachments update 'closed state'
        this._destroyPopover();
        // Terminate subscriptions
        if (this._notificationsSubscription) {
            this._notificationsSubscription.unsubscribe();
        }
        if (this._positionChangeSubscription) {
            this._positionChangeSubscription.unsubscribe();
        }
        this._onDestroy.next();
        this._onDestroy.complete();
        this.popoverOpened.complete();
        this.popoverClosed.complete();
    }
    /**
     * Anchor a popover instance to a view and connection element.
     * @param {?} popover
     * @param {?} viewContainerRef
     * @param {?} anchor
     * @return {?}
     */
    anchor(popover, viewContainerRef, anchor) {
        // Destroy any previous popovers
        this._destroyPopover();
        // Assign local refs
        this._popover = popover;
        this._viewContainerRef = viewContainerRef;
        this._anchor = anchor;
        // Provide notification service as a communication channel between popover and anchor.
        // Then subscribe to notifications to take appropriate actions.
        this._popover._notifications = this._notifications = new PopoverNotificationService();
        this._subscribeToNotifications();
    }
    /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    isPopoverOpen() {
        return this._popoverOpen;
    }
    /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    togglePopover() {
        return this._popoverOpen ? this.closePopover() : this.openPopover();
    }
    /**
     * Opens the popover.
     * @param {?=} options
     * @return {?}
     */
    openPopover(options = {}) {
        if (!this._popoverOpen) {
            this._applyOpenOptions(options);
            this._createOverlay();
            this._subscribeToBackdrop();
            this._subscribeToEscape();
            this._subscribeToDetachments();
            this._saveOpenedState();
        }
    }
    /**
     * Closes the popover.
     * @param {?=} value
     * @return {?}
     */
    closePopover(value) {
        if (this._overlayRef) {
            this._saveClosedState(value);
            this._overlayRef.detach();
        }
    }
    /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    realignPopoverToAnchor() {
        if (this._overlayRef) {
            /** @type {?} */
            const config = this._overlayRef.getConfig();
            /** @type {?} */
            const strategy = (/** @type {?} */ (config.positionStrategy));
            strategy.reapplyLastPosition();
        }
    }
    /**
     * Get a reference to the anchor element.
     * @return {?}
     */
    getAnchorElement() {
        return this._anchor;
    }
    /**
     * Apply behavior properties on the popover based on the open options.
     * @param {?} options
     * @return {?}
     */
    _applyOpenOptions(options) {
        // Only override restoreFocus as `false` if the option is explicitly `false`
        /** @type {?} */
        const restoreFocus = options.restoreFocus !== false;
        this._popover._restoreFocusOverride = restoreFocus;
        // Only override autoFocus as `false` if the option is explicitly `false`
        /** @type {?} */
        const autoFocus = options.autoFocus !== false;
        this._popover._autoFocusOverride = autoFocus;
    }
    /**
     * Create an overlay to be attached to the portal.
     * @return {?}
     */
    _createOverlay() {
        // Create overlay if it doesn't yet exist
        if (!this._overlayRef) {
            this._portal = new TemplatePortal(this._popover._templateRef, this._viewContainerRef);
            /** @type {?} */
            const popoverConfig = {
                horizontalAlign: this._popover.horizontalAlign,
                verticalAlign: this._popover.verticalAlign,
                hasBackdrop: this._popover.hasBackdrop,
                backdropClass: this._popover.backdropClass,
                scrollStrategy: this._popover.scrollStrategy,
                forceAlignment: this._popover.forceAlignment,
                lockAlignment: this._popover.lockAlignment,
            };
            /** @type {?} */
            const overlayConfig = this._getOverlayConfig(popoverConfig, this._anchor);
            this._subscribeToPositionChanges((/** @type {?} */ (overlayConfig.positionStrategy)));
            this._overlayRef = this._overlay.create(overlayConfig);
        }
        // Actually open the popover
        this._overlayRef.attach(this._portal);
        return this._overlayRef;
    }
    /**
     * Removes the popover from the DOM. Does NOT update open state.
     * @return {?}
     */
    _destroyPopover() {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
    }
    /**
     * Destroys the popover immediately if it is closed, or waits until it
     * has been closed to destroy it.
     * @return {?}
     */
    _destroyPopoverOnceClosed() {
        if (this.isPopoverOpen() && this._overlayRef) {
            this._overlayRef.detachments().pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => this._destroyPopover());
        }
        else {
            this._destroyPopover();
        }
    }
    /**
     * Call appropriate anchor method when an event is dispatched through
     * the notification service.
     * @return {?}
     */
    _subscribeToNotifications() {
        if (this._notificationsSubscription) {
            this._notificationsSubscription.unsubscribe();
        }
        this._notificationsSubscription = this._notifications.events()
            .subscribe(event => {
            switch (event.action) {
                case NotificationAction.OPEN:
                    this.openPopover(event.value);
                    break;
                case NotificationAction.CLOSE:
                    this.closePopover(event.value);
                    break;
                case NotificationAction.TOGGLE:
                    this.togglePopover();
                    break;
                case NotificationAction.REPOSITION:
                // TODO: When the overlay's position can be dynamically changed, do not destroy
                case NotificationAction.UPDATE_CONFIG:
                    this._destroyPopoverOnceClosed();
                    break;
                case NotificationAction.REALIGN:
                    this.realignPopoverToAnchor();
                    break;
            }
        });
    }
    /**
     * Close popover when backdrop is clicked.
     * @return {?}
     */
    _subscribeToBackdrop() {
        this._overlayRef
            .backdropClick()
            .pipe(tap(() => this._popover.backdropClicked.emit()), filter(() => this._popover.interactiveClose), takeUntil(this.popoverClosed), takeUntil(this._onDestroy))
            .subscribe(() => this.closePopover());
    }
    /**
     * Close popover when escape keydown event occurs.
     * @return {?}
     */
    _subscribeToEscape() {
        this._overlayRef
            .keydownEvents()
            .pipe(tap(event => this._popover.overlayKeydown.emit(event)), filter(event => event.keyCode === ESCAPE), filter(() => this._popover.interactiveClose), takeUntil(this.popoverClosed), takeUntil(this._onDestroy))
            .subscribe(() => this.closePopover());
    }
    /**
     * Set state back to closed when detached.
     * @return {?}
     */
    _subscribeToDetachments() {
        this._overlayRef
            .detachments()
            .pipe(takeUntil(this._onDestroy))
            .subscribe(() => this._saveClosedState());
    }
    /**
     * Save the opened state of the popover and emit.
     * @return {?}
     */
    _saveOpenedState() {
        if (!this._popoverOpen) {
            this._popover._open = this._popoverOpen = true;
            this.popoverOpened.next();
            this._popover.opened.emit();
        }
    }
    /**
     * Save the closed state of the popover and emit.
     * @param {?=} value
     * @return {?}
     */
    _saveClosedState(value) {
        if (this._popoverOpen) {
            this._popover._open = this._popoverOpen = false;
            this.popoverClosed.next(value);
            this._popover.closed.emit(value);
        }
    }
    /**
     * Gets the text direction of the containing app.
     * @return {?}
     */
    _getDirection() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    /**
     * Create and return a config for creating the overlay.
     * @param {?} config
     * @param {?} anchor
     * @return {?}
     */
    _getOverlayConfig(config, anchor) {
        return new OverlayConfig({
            positionStrategy: this._getPositionStrategy(config.horizontalAlign, config.verticalAlign, config.forceAlignment, config.lockAlignment, anchor),
            hasBackdrop: config.hasBackdrop,
            backdropClass: config.backdropClass || 'cdk-overlay-transparent-backdrop',
            scrollStrategy: this._getScrollStrategyInstance(config.scrollStrategy),
            direction: this._getDirection(),
        });
    }
    /**
     * Listen to changes in the position of the overlay and set the correct alignment classes,
     * ensuring that the animation origin is correct, even with a fallback position.
     * @param {?} position
     * @return {?}
     */
    _subscribeToPositionChanges(position) {
        if (this._positionChangeSubscription) {
            this._positionChangeSubscription.unsubscribe();
        }
        this._positionChangeSubscription = position.positionChanges
            .pipe(takeUntil(this._onDestroy))
            .subscribe(change => {
            // Position changes may occur outside the Angular zone
            this._ngZone.run(() => {
                this._popover._setAlignmentClasses(getHorizontalPopoverAlignment(change.connectionPair.overlayX), getVerticalPopoverAlignment(change.connectionPair.overlayY));
            });
        });
    }
    /**
     * Map a scroll strategy string type to an instance of a scroll strategy.
     * @param {?} strategy
     * @return {?}
     */
    _getScrollStrategyInstance(strategy) {
        switch (strategy) {
            case 'block':
                return this._overlay.scrollStrategies.block();
            case 'reposition':
                return this._overlay.scrollStrategies.reposition();
            case 'close':
                return this._overlay.scrollStrategies.close();
            case 'noop':
            default:
                return this._overlay.scrollStrategies.noop();
        }
    }
    /**
     * Create and return a position strategy based on config provided to the component instance.
     * @param {?} horizontalTarget
     * @param {?} verticalTarget
     * @param {?} forceAlignment
     * @param {?} lockAlignment
     * @param {?} anchor
     * @return {?}
     */
    _getPositionStrategy(horizontalTarget, verticalTarget, forceAlignment, lockAlignment, anchor) {
        // Attach the overlay at the preferred position
        /** @type {?} */
        const targetPosition = getPosition(horizontalTarget, verticalTarget);
        /** @type {?} */
        const positions = [targetPosition];
        /** @type {?} */
        const strategy = this._overlay.position()
            .flexibleConnectedTo(anchor)
            .withFlexibleDimensions(false)
            .withPush(false)
            .withViewportMargin(0)
            .withLockedPosition(lockAlignment);
        // Unless the alignment is forced, add fallbacks based on the preferred positions
        if (!forceAlignment) {
            /** @type {?} */
            const fallbacks = this._getFallbacks(horizontalTarget, verticalTarget);
            positions.push(...fallbacks);
        }
        return strategy.withPositions(positions);
    }
    /**
     * Get fallback positions based around target alignments.
     * @param {?} hTarget
     * @param {?} vTarget
     * @return {?}
     */
    _getFallbacks(hTarget, vTarget) {
        // Determine if the target alignments overlap the anchor
        /** @type {?} */
        const horizontalOverlapAllowed = hTarget !== 'before' && hTarget !== 'after';
        /** @type {?} */
        const verticalOverlapAllowed = vTarget !== 'above' && vTarget !== 'below';
        // If a target alignment doesn't cover the anchor, don't let any of the fallback alignments
        // cover the anchor
        /** @type {?} */
        const possibleHorizontalAlignments = horizontalOverlapAllowed ?
            ['before', 'start', 'center', 'end', 'after'] :
            ['before', 'after'];
        /** @type {?} */
        const possibleVerticalAlignments = verticalOverlapAllowed ?
            ['above', 'start', 'center', 'end', 'below'] :
            ['above', 'below'];
        // Create fallbacks for each allowed prioritized fallback alignment combo
        /** @type {?} */
        const fallbacks = [];
        prioritizeAroundTarget(hTarget, possibleHorizontalAlignments).forEach(h => {
            prioritizeAroundTarget(vTarget, possibleVerticalAlignments).forEach(v => {
                fallbacks.push(getPosition(h, v));
            });
        });
        // Remove the first item since it will be the target alignment and isn't considered a fallback
        return fallbacks.slice(1, fallbacks.length);
    }
}
SatPopoverAnchoringService.ɵfac = function SatPopoverAnchoringService_Factory(t) { return new (t || SatPopoverAnchoringService)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc4.Directionality, 8)); };
SatPopoverAnchoringService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SatPopoverAnchoringService, factory: SatPopoverAnchoringService.ɵfac });
/** @nocollapse */
SatPopoverAnchoringService.ctorParameters = () => [
    { type: Overlay },
    { type: NgZone },
    { type: Directionality, decorators: [{ type: Optional }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SatPopoverAnchoringService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.NgZone }, { type: ɵngcc4.Directionality, decorators: [{
                type: Optional
            }] }]; }, null); })();
/**
 * Helper function to get a cdk position pair from SatPopover alignments.
 * @param {?} h
 * @param {?} v
 * @return {?}
 */
function getPosition(h, v) {
    const { originX, overlayX } = getHorizontalConnectionPosPair(h);
    const { originY, overlayY } = getVerticalConnectionPosPair(v);
    return new ConnectionPositionPair({ originX, originY }, { overlayX, overlayY });
}
/**
 * Helper function to convert an overlay connection position to equivalent popover alignment.
 * @param {?} h
 * @return {?}
 */
function getHorizontalPopoverAlignment(h) {
    if (h === 'start') {
        return 'after';
    }
    if (h === 'end') {
        return 'before';
    }
    return 'center';
}
/**
 * Helper function to convert an overlay connection position to equivalent popover alignment.
 * @param {?} v
 * @return {?}
 */
function getVerticalPopoverAlignment(v) {
    if (v === 'top') {
        return 'below';
    }
    if (v === 'bottom') {
        return 'above';
    }
    return 'center';
}
/**
 * Helper function to convert alignment to origin/overlay position pair.
 * @param {?} h
 * @return {?}
 */
function getHorizontalConnectionPosPair(h) {
    switch (h) {
        case 'before':
            return { originX: 'start', overlayX: 'end' };
        case 'start':
            return { originX: 'start', overlayX: 'start' };
        case 'end':
            return { originX: 'end', overlayX: 'end' };
        case 'after':
            return { originX: 'end', overlayX: 'start' };
        default:
            return { originX: 'center', overlayX: 'center' };
    }
}
/**
 * Helper function to convert alignment to origin/overlay position pair.
 * @param {?} v
 * @return {?}
 */
function getVerticalConnectionPosPair(v) {
    switch (v) {
        case 'above':
            return { originY: 'top', overlayY: 'bottom' };
        case 'start':
            return { originY: 'top', overlayY: 'top' };
        case 'end':
            return { originY: 'bottom', overlayY: 'bottom' };
        case 'below':
            return { originY: 'bottom', overlayY: 'top' };
        default:
            return { originY: 'center', overlayY: 'center' };
    }
}
/**
 * Helper function that takes an ordered array options and returns a reorderded
 * array around the target item. e.g.:
 *
 * target: 3; options: [1, 2, 3, 4, 5, 6, 7];
 *
 * return: [3, 4, 2, 5, 1, 6, 7]
 * @template T
 * @param {?} target
 * @param {?} options
 * @return {?}
 */
function prioritizeAroundTarget(target, options) {
    /** @type {?} */
    const targetIndex = options.indexOf(target);
    // Set the first item to be the target
    /** @type {?} */
    const reordered = [target];
    // Make left and right stacks where the highest priority item is last
    /** @type {?} */
    const left = options.slice(0, targetIndex);
    /** @type {?} */
    const right = options.slice(targetIndex + 1, options.length).reverse();
    // Alternate between stacks until one is empty
    while (left.length && right.length) {
        reordered.push(right.pop());
        reordered.push(left.pop());
    }
    // Flush out right side
    while (right.length) {
        reordered.push(right.pop());
    }
    // Flush out left side
    while (left.length) {
        reordered.push(left.pop());
    }
    return reordered;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class SatPopoverAnchor {
    /**
     * @param {?} _elementRef
     * @param {?} _viewContainerRef
     * @param {?} _anchoring
     */
    constructor(_elementRef, _viewContainerRef, _anchoring) {
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._anchoring = _anchoring;
        /**
         * Emits when the popover is opened.
         */
        this.popoverOpened = new EventEmitter();
        /**
         * Emits when the popover is closed.
         */
        this.popoverClosed = new EventEmitter();
        /**
         * Emits when the directive is destroyed.
         */
        this._onDestroy = new Subject();
    }
    /**
     * Reference to the popover instance.
     * @return {?}
     */
    get attachedPopover() { return this._attachedPopover; }
    /**
     * @param {?} value
     * @return {?}
     */
    set attachedPopover(value) {
        this._validateAttachedPopover(value);
        this._attachedPopover = value;
        // Anchor the popover to the element ref
        this._anchoring.anchor(this.attachedPopover, this._viewContainerRef, this._elementRef);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Re-emit open and close events
        /** @type {?} */
        const opened$ = this._anchoring.popoverOpened
            .pipe(tap(() => this.popoverOpened.emit()));
        /** @type {?} */
        const closed$ = this._anchoring.popoverClosed
            .pipe(tap(value => this.popoverClosed.emit(value)));
        merge(opened$, closed$).pipe(takeUntil(this._onDestroy)).subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    isPopoverOpen() {
        return this._anchoring.isPopoverOpen();
    }
    /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    togglePopover() {
        this._anchoring.togglePopover();
    }
    /**
     * Opens the popover.
     * @param {?=} options
     * @return {?}
     */
    openPopover(options = {}) {
        this._anchoring.openPopover(options);
    }
    /**
     * Closes the popover.
     * @param {?=} value
     * @return {?}
     */
    closePopover(value) {
        this._anchoring.closePopover(value);
    }
    /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    realignPopover() {
        this._anchoring.realignPopoverToAnchor();
    }
    /**
     * Get a reference to the anchor element.
     * @return {?}
     */
    getElement() {
        return this._elementRef;
    }
    /**
     * Throws an error if the popover instance is not provided.
     * @param {?} popover
     * @return {?}
     */
    _validateAttachedPopover(popover) {
        if (!popover || !(popover instanceof SatPopover)) {
            throw getInvalidPopoverError();
        }
    }
}
SatPopoverAnchor.ɵfac = function SatPopoverAnchor_Factory(t) { return new (t || SatPopoverAnchor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(SatPopoverAnchoringService)); };
SatPopoverAnchor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SatPopoverAnchor, selectors: [["", "satPopoverAnchorFor", ""]], inputs: { attachedPopover: ["satPopoverAnchorFor", "attachedPopover"] }, outputs: { popoverOpened: "popoverOpened", popoverClosed: "popoverClosed" }, exportAs: ["satPopoverAnchor"], features: [ɵngcc0.ɵɵProvidersFeature([SatPopoverAnchoringService])] });
/** @nocollapse */
SatPopoverAnchor.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: SatPopoverAnchoringService }
];
SatPopoverAnchor.propDecorators = {
    attachedPopover: [{ type: Input, args: ['satPopoverAnchorFor',] }],
    popoverOpened: [{ type: Output }],
    popoverClosed: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SatPopoverAnchor, [{
        type: Directive,
        args: [{
                selector: '[satPopoverAnchorFor]',
                exportAs: 'satPopoverAnchor',
                providers: [SatPopoverAnchoringService]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: SatPopoverAnchoringService }]; }, { popoverOpened: [{
            type: Output
        }], popoverClosed: [{
            type: Output
        }], attachedPopover: [{
            type: Input,
            args: ['satPopoverAnchorFor']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class SatPopoverHoverDirective {
    /**
     * @param {?} anchor
     */
    constructor(anchor) {
        this.anchor = anchor;
        this._satPopoverHover = 0;
        /**
         * Emits when the directive is destroyed.
         */
        this._onDestroy = new Subject();
        /**
         * Emits when the user's mouse enters the element.
         */
        this._onMouseEnter = new Subject();
        /**
         * Emits when the user's mouse leaves the element.
         */
        this._onMouseLeave = new Subject();
    }
    /**
     * Amount of time to delay (ms) after hovering starts before
     * the popover opens. Defaults to 0ms.
     * @return {?}
     */
    get satPopoverHover() { return this._satPopoverHover; }
    /**
     * @param {?} val
     * @return {?}
     */
    set satPopoverHover(val) {
        this._satPopoverHover = coerceNumberProperty(val);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // Whenever the user hovers this host element, delay the configured
        // amount of time and open the popover. Terminate if the mouse leaves
        // the host element before the delay is complete.
        this._onMouseEnter
            .pipe(switchMap(() => {
            return of(null).pipe(delay(this._satPopoverHover || 0), takeUntil(this._onMouseLeave));
        }), takeUntil(this._onDestroy))
            .subscribe(() => this.anchor.openPopover());
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    /**
     * @return {?}
     */
    showPopover() {
        this._onMouseEnter.next();
    }
    /**
     * @return {?}
     */
    closePopover() {
        this._onMouseLeave.next();
        this.anchor.closePopover();
    }
}
SatPopoverHoverDirective.ɵfac = function SatPopoverHoverDirective_Factory(t) { return new (t || SatPopoverHoverDirective)(ɵngcc0.ɵɵdirectiveInject(SatPopoverAnchor)); };
SatPopoverHoverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SatPopoverHoverDirective, selectors: [["", "satPopoverHover", ""]], hostBindings: function SatPopoverHoverDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseenter", function SatPopoverHoverDirective_mouseenter_HostBindingHandler() { return ctx.showPopover(); })("mouseleave", function SatPopoverHoverDirective_mouseleave_HostBindingHandler() { return ctx.closePopover(); });
    } }, inputs: { satPopoverHover: "satPopoverHover" } });
/** @nocollapse */
SatPopoverHoverDirective.ctorParameters = () => [
    { type: SatPopoverAnchor }
];
SatPopoverHoverDirective.propDecorators = {
    satPopoverHover: [{ type: Input }],
    showPopover: [{ type: HostListener, args: ['mouseenter',] }],
    closePopover: [{ type: HostListener, args: ['mouseleave',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SatPopoverHoverDirective, [{
        type: Directive,
        args: [{
                selector: '[satPopoverHover]'
            }]
    }], function () { return [{ type: SatPopoverAnchor }]; }, { satPopoverHover: [{
            type: Input
        }], showPopover: [{
            type: HostListener,
            args: ['mouseenter']
        }], closePopover: [{
            type: HostListener,
            args: ['mouseleave']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class SatPopoverModule {
}
SatPopoverModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SatPopoverModule });
SatPopoverModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SatPopoverModule_Factory(t) { return new (t || SatPopoverModule)(); }, imports: [[
            CommonModule,
            OverlayModule,
            A11yModule,
            BidiModule,
        ],
        BidiModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SatPopoverModule, { declarations: function () { return [SatPopover,
        SatPopoverAnchor,
        SatPopoverHoverDirective]; }, imports: function () { return [CommonModule,
        OverlayModule,
        A11yModule,
        BidiModule]; }, exports: function () { return [SatPopover,
        SatPopoverAnchor,
        SatPopoverHoverDirective,
        BidiModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SatPopoverModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    OverlayModule,
                    A11yModule,
                    BidiModule,
                ],
                declarations: [
                    SatPopover,
                    SatPopoverAnchor,
                    SatPopoverHoverDirective,
                ],
                exports: [
                    SatPopover,
                    SatPopoverAnchor,
                    SatPopoverHoverDirective,
                    BidiModule,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { SatPopoverModule, SatPopoverAnchor, SatPopoverAnchoringService, SatPopover, SatPopoverHoverDirective, transformPopover as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,