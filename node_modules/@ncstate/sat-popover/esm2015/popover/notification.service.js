/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/** @enum {number} */
const NotificationAction = {
    /** Popover should open. */
    OPEN: 0,
    /** Popover should close. */
    CLOSE: 1,
    /** Popover should toggle open or closed. */
    TOGGLE: 2,
    /** Popover has new target positions. */
    REPOSITION: 3,
    /** Popover needs new configuration. */
    UPDATE_CONFIG: 4,
    /** Popover should realign itself to the anchor.  */
    REALIGN: 5,
};
export { NotificationAction };
NotificationAction[NotificationAction.OPEN] = 'OPEN';
NotificationAction[NotificationAction.CLOSE] = 'CLOSE';
NotificationAction[NotificationAction.TOGGLE] = 'TOGGLE';
NotificationAction[NotificationAction.REPOSITION] = 'REPOSITION';
NotificationAction[NotificationAction.UPDATE_CONFIG] = 'UPDATE_CONFIG';
NotificationAction[NotificationAction.REALIGN] = 'REALIGN';
/**
 * Event object for dispatching to anchoring service.
 */
export class PopoverNotification {
    /**
     * @param {?} action
     * @param {?=} value
     */
    constructor(action, value) {
        this.action = action;
        this.value = value;
    }
}
if (false) {
    /**
     * Action to perform.
     * @type {?}
     */
    PopoverNotification.prototype.action;
    /**
     * Optional payload.
     * @type {?}
     */
    PopoverNotification.prototype.value;
}
export class PopoverNotificationService {
    constructor() {
        this.store = new Subject();
    }
    /**
     * Dispatch a notification to all subscribers.
     * @param {?} notification
     * @return {?}
     */
    dispatch(notification) {
        this.store.next(notification);
    }
    /**
     * Stream of notification events.
     * @return {?}
     */
    events() {
        return this.store.asObservable();
    }
    /**
     * Complete event stream.
     * @return {?}
     */
    dispose() {
        this.store.complete();
    }
}
PopoverNotificationService.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    PopoverNotificationService.prototype.store;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmNzdGF0ZS9zYXQtcG9wb3Zlci8iLCJzb3VyY2VzIjpbInBvcG92ZXIvbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0lBSXpDLDJCQUEyQjtJQUMzQixPQUFJO0lBQ0osNEJBQTRCO0lBQzVCLFFBQUs7SUFDTCw0Q0FBNEM7SUFDNUMsU0FBTTtJQUNOLHdDQUF3QztJQUN4QyxhQUFVO0lBQ1YsdUNBQXVDO0lBQ3ZDLGdCQUFhO0lBQ2Isb0RBQW9EO0lBQ3BELFVBQU87Ozs7Ozs7Ozs7OztBQUlULE1BQU0sT0FBTyxtQkFBbUI7Ozs7O0lBQzlCLFlBRVMsTUFBMEIsRUFFMUIsS0FBVztRQUZYLFdBQU0sR0FBTixNQUFNLENBQW9CO1FBRTFCLFVBQUssR0FBTCxLQUFLLENBQU07SUFDaEIsQ0FBQztDQUNOOzs7Ozs7SUFKRyxxQ0FBaUM7Ozs7O0lBRWpDLG9DQUFrQjs7QUFLdEIsTUFBTSxPQUFPLDBCQUEwQjtJQUR2QztRQUdVLFVBQUssR0FBRyxJQUFJLE9BQU8sRUFBdUIsQ0FBQztJQWlCckQsQ0FBQzs7Ozs7O0lBZEMsUUFBUSxDQUFDLFlBQWlDO1FBQ3hDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBR0QsTUFBTTtRQUNKLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUdELE9BQU87UUFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hCLENBQUM7OztZQWxCRixVQUFVOzs7O0lBR1QsMkNBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG4vKiogRW51bWVyYXRlZCBhY3Rpb25zIGZvciBhIHBvcG92ZXIgdG8gcGVyZm9ybS4gKi9cbmV4cG9ydCBlbnVtIE5vdGlmaWNhdGlvbkFjdGlvbiB7XG4gIC8qKiBQb3BvdmVyIHNob3VsZCBvcGVuLiAqL1xuICBPUEVOLFxuICAvKiogUG9wb3ZlciBzaG91bGQgY2xvc2UuICovXG4gIENMT1NFLFxuICAvKiogUG9wb3ZlciBzaG91bGQgdG9nZ2xlIG9wZW4gb3IgY2xvc2VkLiAqL1xuICBUT0dHTEUsXG4gIC8qKiBQb3BvdmVyIGhhcyBuZXcgdGFyZ2V0IHBvc2l0aW9ucy4gKi9cbiAgUkVQT1NJVElPTixcbiAgLyoqIFBvcG92ZXIgbmVlZHMgbmV3IGNvbmZpZ3VyYXRpb24uICovXG4gIFVQREFURV9DT05GSUcsXG4gIC8qKiBQb3BvdmVyIHNob3VsZCByZWFsaWduIGl0c2VsZiB0byB0aGUgYW5jaG9yLiAgKi9cbiAgUkVBTElHTixcbn1cblxuLyoqIEV2ZW50IG9iamVjdCBmb3IgZGlzcGF0Y2hpbmcgdG8gYW5jaG9yaW5nIHNlcnZpY2UuICovXG5leHBvcnQgY2xhc3MgUG9wb3Zlck5vdGlmaWNhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBBY3Rpb24gdG8gcGVyZm9ybS4gKi9cbiAgICBwdWJsaWMgYWN0aW9uOiBOb3RpZmljYXRpb25BY3Rpb24sXG4gICAgLyoqIE9wdGlvbmFsIHBheWxvYWQuICovXG4gICAgcHVibGljIHZhbHVlPzogYW55XG4gICkgeyB9XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb3BvdmVyTm90aWZpY2F0aW9uU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBzdG9yZSA9IG5ldyBTdWJqZWN0PFBvcG92ZXJOb3RpZmljYXRpb24+KCk7XG5cbiAgLyoqIERpc3BhdGNoIGEgbm90aWZpY2F0aW9uIHRvIGFsbCBzdWJzY3JpYmVycy4gKi9cbiAgZGlzcGF0Y2gobm90aWZpY2F0aW9uOiBQb3BvdmVyTm90aWZpY2F0aW9uKSB7XG4gICAgdGhpcy5zdG9yZS5uZXh0KG5vdGlmaWNhdGlvbik7XG4gIH1cblxuICAvKiogU3RyZWFtIG9mIG5vdGlmaWNhdGlvbiBldmVudHMuICovXG4gIGV2ZW50cygpOiBPYnNlcnZhYmxlPFBvcG92ZXJOb3RpZmljYXRpb24+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIC8qKiBDb21wbGV0ZSBldmVudCBzdHJlYW0uICovXG4gIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5zdG9yZS5jb21wbGV0ZSgpO1xuICB9XG5cbn1cbiJdfQ==