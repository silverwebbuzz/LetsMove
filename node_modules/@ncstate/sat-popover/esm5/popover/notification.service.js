/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/** @enum {number} */
var NotificationAction = {
    /** Popover should open. */
    OPEN: 0,
    /** Popover should close. */
    CLOSE: 1,
    /** Popover should toggle open or closed. */
    TOGGLE: 2,
    /** Popover has new target positions. */
    REPOSITION: 3,
    /** Popover needs new configuration. */
    UPDATE_CONFIG: 4,
    /** Popover should realign itself to the anchor.  */
    REALIGN: 5,
};
export { NotificationAction };
NotificationAction[NotificationAction.OPEN] = 'OPEN';
NotificationAction[NotificationAction.CLOSE] = 'CLOSE';
NotificationAction[NotificationAction.TOGGLE] = 'TOGGLE';
NotificationAction[NotificationAction.REPOSITION] = 'REPOSITION';
NotificationAction[NotificationAction.UPDATE_CONFIG] = 'UPDATE_CONFIG';
NotificationAction[NotificationAction.REALIGN] = 'REALIGN';
/**
 * Event object for dispatching to anchoring service.
 */
var /**
 * Event object for dispatching to anchoring service.
 */
PopoverNotification = /** @class */ (function () {
    function PopoverNotification(action, value) {
        this.action = action;
        this.value = value;
    }
    return PopoverNotification;
}());
/**
 * Event object for dispatching to anchoring service.
 */
export { PopoverNotification };
if (false) {
    /**
     * Action to perform.
     * @type {?}
     */
    PopoverNotification.prototype.action;
    /**
     * Optional payload.
     * @type {?}
     */
    PopoverNotification.prototype.value;
}
var PopoverNotificationService = /** @class */ (function () {
    function PopoverNotificationService() {
        this.store = new Subject();
    }
    /** Dispatch a notification to all subscribers. */
    /**
     * Dispatch a notification to all subscribers.
     * @param {?} notification
     * @return {?}
     */
    PopoverNotificationService.prototype.dispatch = /**
     * Dispatch a notification to all subscribers.
     * @param {?} notification
     * @return {?}
     */
    function (notification) {
        this.store.next(notification);
    };
    /** Stream of notification events. */
    /**
     * Stream of notification events.
     * @return {?}
     */
    PopoverNotificationService.prototype.events = /**
     * Stream of notification events.
     * @return {?}
     */
    function () {
        return this.store.asObservable();
    };
    /** Complete event stream. */
    /**
     * Complete event stream.
     * @return {?}
     */
    PopoverNotificationService.prototype.dispose = /**
     * Complete event stream.
     * @return {?}
     */
    function () {
        this.store.complete();
    };
    PopoverNotificationService.decorators = [
        { type: Injectable }
    ];
    return PopoverNotificationService;
}());
export { PopoverNotificationService };
if (false) {
    /** @type {?} */
    PopoverNotificationService.prototype.store;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmNzdGF0ZS9zYXQtcG9wb3Zlci8iLCJzb3VyY2VzIjpbInBvcG92ZXIvbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0lBSXpDLDJCQUEyQjtJQUMzQixPQUFJO0lBQ0osNEJBQTRCO0lBQzVCLFFBQUs7SUFDTCw0Q0FBNEM7SUFDNUMsU0FBTTtJQUNOLHdDQUF3QztJQUN4QyxhQUFVO0lBQ1YsdUNBQXVDO0lBQ3ZDLGdCQUFhO0lBQ2Isb0RBQW9EO0lBQ3BELFVBQU87Ozs7Ozs7Ozs7OztBQUlUOzs7O0lBQ0UsNkJBRVMsTUFBMEIsRUFFMUIsS0FBVztRQUZYLFdBQU0sR0FBTixNQUFNLENBQW9CO1FBRTFCLFVBQUssR0FBTCxLQUFLLENBQU07SUFDaEIsQ0FBQztJQUNQLDBCQUFDO0FBQUQsQ0FBQyxBQVBELElBT0M7Ozs7Ozs7Ozs7SUFKRyxxQ0FBaUM7Ozs7O0lBRWpDLG9DQUFrQjs7QUFJdEI7SUFBQTtRQUdVLFVBQUssR0FBRyxJQUFJLE9BQU8sRUFBdUIsQ0FBQztJQWlCckQsQ0FBQztJQWZDLGtEQUFrRDs7Ozs7O0lBQ2xELDZDQUFROzs7OztJQUFSLFVBQVMsWUFBaUM7UUFDeEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELHFDQUFxQzs7Ozs7SUFDckMsMkNBQU07Ozs7SUFBTjtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRUQsNkJBQTZCOzs7OztJQUM3Qiw0Q0FBTzs7OztJQUFQO1FBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QixDQUFDOztnQkFsQkYsVUFBVTs7SUFvQlgsaUNBQUM7Q0FBQSxBQXBCRCxJQW9CQztTQW5CWSwwQkFBMEI7OztJQUVyQywyQ0FBbUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbi8qKiBFbnVtZXJhdGVkIGFjdGlvbnMgZm9yIGEgcG9wb3ZlciB0byBwZXJmb3JtLiAqL1xuZXhwb3J0IGVudW0gTm90aWZpY2F0aW9uQWN0aW9uIHtcbiAgLyoqIFBvcG92ZXIgc2hvdWxkIG9wZW4uICovXG4gIE9QRU4sXG4gIC8qKiBQb3BvdmVyIHNob3VsZCBjbG9zZS4gKi9cbiAgQ0xPU0UsXG4gIC8qKiBQb3BvdmVyIHNob3VsZCB0b2dnbGUgb3BlbiBvciBjbG9zZWQuICovXG4gIFRPR0dMRSxcbiAgLyoqIFBvcG92ZXIgaGFzIG5ldyB0YXJnZXQgcG9zaXRpb25zLiAqL1xuICBSRVBPU0lUSU9OLFxuICAvKiogUG9wb3ZlciBuZWVkcyBuZXcgY29uZmlndXJhdGlvbi4gKi9cbiAgVVBEQVRFX0NPTkZJRyxcbiAgLyoqIFBvcG92ZXIgc2hvdWxkIHJlYWxpZ24gaXRzZWxmIHRvIHRoZSBhbmNob3IuICAqL1xuICBSRUFMSUdOLFxufVxuXG4vKiogRXZlbnQgb2JqZWN0IGZvciBkaXNwYXRjaGluZyB0byBhbmNob3Jpbmcgc2VydmljZS4gKi9cbmV4cG9ydCBjbGFzcyBQb3BvdmVyTm90aWZpY2F0aW9uIHtcbiAgY29uc3RydWN0b3IoXG4gICAgLyoqIEFjdGlvbiB0byBwZXJmb3JtLiAqL1xuICAgIHB1YmxpYyBhY3Rpb246IE5vdGlmaWNhdGlvbkFjdGlvbixcbiAgICAvKiogT3B0aW9uYWwgcGF5bG9hZC4gKi9cbiAgICBwdWJsaWMgdmFsdWU/OiBhbnlcbiAgKSB7IH1cbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvcG92ZXJOb3RpZmljYXRpb25TZXJ2aWNlIHtcblxuICBwcml2YXRlIHN0b3JlID0gbmV3IFN1YmplY3Q8UG9wb3Zlck5vdGlmaWNhdGlvbj4oKTtcblxuICAvKiogRGlzcGF0Y2ggYSBub3RpZmljYXRpb24gdG8gYWxsIHN1YnNjcmliZXJzLiAqL1xuICBkaXNwYXRjaChub3RpZmljYXRpb246IFBvcG92ZXJOb3RpZmljYXRpb24pIHtcbiAgICB0aGlzLnN0b3JlLm5leHQobm90aWZpY2F0aW9uKTtcbiAgfVxuXG4gIC8qKiBTdHJlYW0gb2Ygbm90aWZpY2F0aW9uIGV2ZW50cy4gKi9cbiAgZXZlbnRzKCk6IE9ic2VydmFibGU8UG9wb3Zlck5vdGlmaWNhdGlvbj4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgLyoqIENvbXBsZXRlIGV2ZW50IHN0cmVhbS4gKi9cbiAgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JlLmNvbXBsZXRlKCk7XG4gIH1cblxufVxuIl19