/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, ViewContainerRef } from '@angular/core';
import { Subject, merge } from 'rxjs';
import { tap, takeUntil } from 'rxjs/operators';
import { SatPopover } from './popover.component';
import { getInvalidPopoverError } from './popover.errors';
import { SatPopoverAnchoringService } from './popover-anchoring.service';
var SatPopoverAnchor = /** @class */ (function () {
    function SatPopoverAnchor(_elementRef, _viewContainerRef, _anchoring) {
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._anchoring = _anchoring;
        /**
         * Emits when the popover is opened.
         */
        this.popoverOpened = new EventEmitter();
        /**
         * Emits when the popover is closed.
         */
        this.popoverClosed = new EventEmitter();
        /**
         * Emits when the directive is destroyed.
         */
        this._onDestroy = new Subject();
    }
    Object.defineProperty(SatPopoverAnchor.prototype, "attachedPopover", {
        /** Reference to the popover instance. */
        get: /**
         * Reference to the popover instance.
         * @return {?}
         */
        function () { return this._attachedPopover; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._validateAttachedPopover(value);
            this._attachedPopover = value;
            // Anchor the popover to the element ref
            this._anchoring.anchor(this.attachedPopover, this._viewContainerRef, this._elementRef);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SatPopoverAnchor.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Re-emit open and close events
        /** @type {?} */
        var opened$ = this._anchoring.popoverOpened
            .pipe(tap(function () { return _this.popoverOpened.emit(); }));
        /** @type {?} */
        var closed$ = this._anchoring.popoverClosed
            .pipe(tap(function (value) { return _this.popoverClosed.emit(value); }));
        merge(opened$, closed$).pipe(takeUntil(this._onDestroy)).subscribe();
    };
    /**
     * @return {?}
     */
    SatPopoverAnchor.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._onDestroy.next();
        this._onDestroy.complete();
    };
    /** Gets whether the popover is presently open. */
    /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    SatPopoverAnchor.prototype.isPopoverOpen = /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    function () {
        return this._anchoring.isPopoverOpen();
    };
    /** Toggles the popover between the open and closed states. */
    /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    SatPopoverAnchor.prototype.togglePopover = /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    function () {
        this._anchoring.togglePopover();
    };
    /** Opens the popover. */
    /**
     * Opens the popover.
     * @param {?=} options
     * @return {?}
     */
    SatPopoverAnchor.prototype.openPopover = /**
     * Opens the popover.
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        this._anchoring.openPopover(options);
    };
    /** Closes the popover. */
    /**
     * Closes the popover.
     * @param {?=} value
     * @return {?}
     */
    SatPopoverAnchor.prototype.closePopover = /**
     * Closes the popover.
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        this._anchoring.closePopover(value);
    };
    /** Realign the popover to the anchor. */
    /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    SatPopoverAnchor.prototype.realignPopover = /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    function () {
        this._anchoring.realignPopoverToAnchor();
    };
    /** Get a reference to the anchor element. */
    /**
     * Get a reference to the anchor element.
     * @return {?}
     */
    SatPopoverAnchor.prototype.getElement = /**
     * Get a reference to the anchor element.
     * @return {?}
     */
    function () {
        return this._elementRef;
    };
    /** Throws an error if the popover instance is not provided. */
    /**
     * Throws an error if the popover instance is not provided.
     * @param {?} popover
     * @return {?}
     */
    SatPopoverAnchor.prototype._validateAttachedPopover = /**
     * Throws an error if the popover instance is not provided.
     * @param {?} popover
     * @return {?}
     */
    function (popover) {
        if (!popover || !(popover instanceof SatPopover)) {
            throw getInvalidPopoverError();
        }
    };
    SatPopoverAnchor.decorators = [
        { type: Directive, args: [{
                    selector: '[satPopoverAnchorFor]',
                    exportAs: 'satPopoverAnchor',
                    providers: [SatPopoverAnchoringService],
                },] }
    ];
    /** @nocollapse */
    SatPopoverAnchor.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: SatPopoverAnchoringService }
    ]; };
    SatPopoverAnchor.propDecorators = {
        attachedPopover: [{ type: Input, args: ['satPopoverAnchorFor',] }],
        popoverOpened: [{ type: Output }],
        popoverClosed: [{ type: Output }]
    };
    return SatPopoverAnchor;
}());
export { SatPopoverAnchor };
if (false) {
    /** @type {?} */
    SatPopoverAnchor.prototype._attachedPopover;
    /**
     * Emits when the popover is opened.
     * @type {?}
     */
    SatPopoverAnchor.prototype.popoverOpened;
    /**
     * Emits when the popover is closed.
     * @type {?}
     */
    SatPopoverAnchor.prototype.popoverClosed;
    /**
     * Emits when the directive is destroyed.
     * @type {?}
     */
    SatPopoverAnchor.prototype._onDestroy;
    /** @type {?} */
    SatPopoverAnchor.prototype._elementRef;
    /** @type {?} */
    SatPopoverAnchor.prototype._viewContainerRef;
    /** @type {?} */
    SatPopoverAnchor.prototype._anchoring;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1hbmNob3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5jc3RhdGUvc2F0LXBvcG92ZXIvIiwic291cmNlcyI6WyJwb3BvdmVyL3BvcG92ZXItYW5jaG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBQ04sZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzFELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBR3pFO0lBMkJFLDBCQUNVLFdBQXVCLEVBQ3ZCLGlCQUFtQyxFQUNwQyxVQUFzQztRQUZyQyxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUN2QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQWtCO1FBQ3BDLGVBQVUsR0FBVixVQUFVLENBQTRCOzs7O1FBWHJDLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQzs7OztRQUd6QyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7Ozs7UUFHMUMsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFNckMsQ0FBQztJQXZCTCxzQkFDSSw2Q0FBZTtRQUZuQix5Q0FBeUM7Ozs7O1FBQ3pDLGNBQ3dCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQzs7Ozs7UUFDdkQsVUFBb0IsS0FBaUI7WUFDbkMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEtB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Qiw2Q0FBMkM7O0lBQzNDLHNDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QsIG1lcmdlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgU2F0UG9wb3ZlciB9IGZyb20gJy4vcG9wb3Zlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgZ2V0SW52YWxpZFBvcG92ZXJFcnJvciB9IGZyb20gJy4vcG9wb3Zlci5lcnJvcnMnO1xuaW1wb3J0IHsgU2F0UG9wb3ZlckFuY2hvcmluZ1NlcnZpY2UgfSBmcm9tICcuL3BvcG92ZXItYW5jaG9yaW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2F0UG9wb3Zlck9wZW5PcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzYXRQb3BvdmVyQW5jaG9yRm9yXScsXG4gIGV4cG9ydEFzOiAnc2F0UG9wb3ZlckFuY2hvcicsXG4gIHByb3ZpZGVyczogW1NhdFBvcG92ZXJBbmNob3JpbmdTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgU2F0UG9wb3ZlckFuY2hvciBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAvKiogUmVmZXJlbmNlIHRvIHRoZSBwb3BvdmVyIGluc3RhbmNlLiAqL1xuICBASW5wdXQoJ3NhdFBvcG92ZXJBbmNob3JGb3InKVxuICBnZXQgYXR0YWNoZWRQb3BvdmVyKCkgeyByZXR1cm4gdGhpcy5fYXR0YWNoZWRQb3BvdmVyOyB9XG4gIHNldCBhdHRhY2hlZFBvcG92ZXIodmFsdWU6IFNhdFBvcG92ZXIpIHtcbiAgICB0aGlzLl92YWxpZGF0ZUF0dGFjaGVkUG9wb3Zlcih2YWx1ZSk7XG4gICAgdGhpcy5fYXR0YWNoZWRQb3BvdmVyID0gdmFsdWU7XG4gICAgLy8gQW5jaG9yIHRoZSBwb3BvdmVyIHRvIHRoZSBlbGVtZW50IHJlZlxuICAgIHRoaXMuX2FuY2hvcmluZy5hbmNob3IodGhpcy5hdHRhY2hlZFBvcG92ZXIsIHRoaXMuX3ZpZXdDb250YWluZXJSZWYsIHRoaXMuX2VsZW1lbnRSZWYpO1xuICB9XG4gIHByaXZhdGUgX2F0dGFjaGVkUG9wb3ZlcjogU2F0UG9wb3ZlcjtcblxuICAvKiogRW1pdHMgd2hlbiB0aGUgcG9wb3ZlciBpcyBvcGVuZWQuICovXG4gIEBPdXRwdXQoKSBwb3BvdmVyT3BlbmVkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIC8qKiBFbWl0cyB3aGVuIHRoZSBwb3BvdmVyIGlzIGNsb3NlZC4gKi9cbiAgQE91dHB1dCgpIHBvcG92ZXJDbG9zZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAvKiogRW1pdHMgd2hlbiB0aGUgZGlyZWN0aXZlIGlzIGRlc3Ryb3llZC4gKi9cbiAgcHJpdmF0ZSBfb25EZXN0cm95ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgX3ZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHVibGljIF9hbmNob3Jpbmc6IFNhdFBvcG92ZXJBbmNob3JpbmdTZXJ2aWNlLFxuICApIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIC8vIFJlLWVtaXQgb3BlbiBhbmQgY2xvc2UgZXZlbnRzXG4gICAgY29uc3Qgb3BlbmVkJCA9IHRoaXMuX2FuY2hvcmluZy5wb3BvdmVyT3BlbmVkXG4gICAgICAucGlwZSh0YXAoKCkgPT4gdGhpcy5wb3BvdmVyT3BlbmVkLmVtaXQoKSkpO1xuICAgIGNvbnN0IGNsb3NlZCQgPSB0aGlzLl9hbmNob3JpbmcucG9wb3ZlckNsb3NlZFxuICAgICAgLnBpcGUodGFwKHZhbHVlID0+IHRoaXMucG9wb3ZlckNsb3NlZC5lbWl0KHZhbHVlKSkpO1xuICAgIG1lcmdlKG9wZW5lZCQsIGNsb3NlZCQpLnBpcGUodGFrZVVudGlsKHRoaXMuX29uRGVzdHJveSkpLnN1YnNjcmliZSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fb25EZXN0cm95Lm5leHQoKTtcbiAgICB0aGlzLl9vbkRlc3Ryb3kuY29tcGxldGUoKTtcbiAgfVxuXG4gIC8qKiBHZXRzIHdoZXRoZXIgdGhlIHBvcG92ZXIgaXMgcHJlc2VudGx5IG9wZW4uICovXG4gIGlzUG9wb3Zlck9wZW4oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2FuY2hvcmluZy5pc1BvcG92ZXJPcGVuKCk7XG4gIH1cblxuICAvKiogVG9nZ2xlcyB0aGUgcG9wb3ZlciBiZXR3ZWVuIHRoZSBvcGVuIGFuZCBjbG9zZWQgc3RhdGVzLiAqL1xuICB0b2dnbGVQb3BvdmVyKCk6IHZvaWQge1xuICAgIHRoaXMuX2FuY2hvcmluZy50b2dnbGVQb3BvdmVyKCk7XG4gIH1cblxuICAvKiogT3BlbnMgdGhlIHBvcG92ZXIuICovXG4gIG9wZW5Qb3BvdmVyKG9wdGlvbnM6IFNhdFBvcG92ZXJPcGVuT3B0aW9ucyA9IHt9KTogdm9pZCB7XG4gICAgdGhpcy5fYW5jaG9yaW5nLm9wZW5Qb3BvdmVyKG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqIENsb3NlcyB0aGUgcG9wb3Zlci4gKi9cbiAgY2xvc2VQb3BvdmVyKHZhbHVlPzogYW55KTogdm9pZCB7XG4gICAgdGhpcy5fYW5jaG9yaW5nLmNsb3NlUG9wb3Zlcih2YWx1ZSk7XG4gIH1cblxuICAvKiogUmVhbGlnbiB0aGUgcG9wb3ZlciB0byB0aGUgYW5jaG9yLiAqL1xuICByZWFsaWduUG9wb3ZlcigpOiB2b2lkIHtcbiAgICB0aGlzLl9hbmNob3JpbmcucmVhbGlnblBvcG92ZXJUb0FuY2hvcigpO1xuICB9XG5cbiAgLyoqIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgYW5jaG9yIGVsZW1lbnQuICovXG4gIGdldEVsZW1lbnQoKTogRWxlbWVudFJlZiB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRSZWY7XG4gIH1cblxuICAvKiogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBwb3BvdmVyIGluc3RhbmNlIGlzIG5vdCBwcm92aWRlZC4gKi9cbiAgcHJpdmF0ZSBfdmFsaWRhdGVBdHRhY2hlZFBvcG92ZXIocG9wb3ZlcjogU2F0UG9wb3Zlcik6IHZvaWQge1xuICAgIGlmICghcG9wb3ZlciB8fCAhKHBvcG92ZXIgaW5zdGFuY2VvZiBTYXRQb3BvdmVyKSkge1xuICAgICAgdGhyb3cgZ2V0SW52YWxpZFBvcG92ZXJFcnJvcigpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=