import { ElementRef, EventEmitter, OnInit, OnDestroy, ViewContainerRef } from '@angular/core';
import { SatPopover } from './popover.component';
import { SatPopoverAnchoringService } from './popover-anchoring.service';
import { SatPopoverOpenOptions } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class SatPopoverAnchor implements OnInit, OnDestroy {
    private _elementRef;
    private _viewContainerRef;
    _anchoring: SatPopoverAnchoringService;
    /** Reference to the popover instance. */
    attachedPopover: SatPopover;
    private _attachedPopover;
    /** Emits when the popover is opened. */
    popoverOpened: EventEmitter<void>;
    /** Emits when the popover is closed. */
    popoverClosed: EventEmitter<any>;
    /** Emits when the directive is destroyed. */
    private _onDestroy;
    constructor(_elementRef: ElementRef, _viewContainerRef: ViewContainerRef, _anchoring: SatPopoverAnchoringService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /** Gets whether the popover is presently open. */
    isPopoverOpen(): boolean;
    /** Toggles the popover between the open and closed states. */
    togglePopover(): void;
    /** Opens the popover. */
    openPopover(options?: SatPopoverOpenOptions): void;
    /** Closes the popover. */
    closePopover(value?: any): void;
    /** Realign the popover to the anchor. */
    realignPopover(): void;
    /** Get a reference to the anchor element. */
    getElement(): ElementRef;
    /** Throws an error if the popover instance is not provided. */
    private _validateAttachedPopover;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SatPopoverAnchor, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SatPopoverAnchor, "[satPopoverAnchorFor]", ["satPopoverAnchor"], { "attachedPopover": "satPopoverAnchorFor"; }, { "popoverOpened": "popoverOpened"; "popoverClosed": "popoverClosed"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1hbmNob3IuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInBvcG92ZXItYW5jaG9yLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT25EZXN0cm95LCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTYXRQb3BvdmVyIH0gZnJvbSAnLi9wb3BvdmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTYXRQb3BvdmVyQW5jaG9yaW5nU2VydmljZSB9IGZyb20gJy4vcG9wb3Zlci1hbmNob3Jpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBTYXRQb3BvdmVyT3Blbk9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNhdFBvcG92ZXJBbmNob3IgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF92aWV3Q29udGFpbmVyUmVmO1xuICAgIF9hbmNob3Jpbmc6IFNhdFBvcG92ZXJBbmNob3JpbmdTZXJ2aWNlO1xuICAgIC8qKiBSZWZlcmVuY2UgdG8gdGhlIHBvcG92ZXIgaW5zdGFuY2UuICovXG4gICAgYXR0YWNoZWRQb3BvdmVyOiBTYXRQb3BvdmVyO1xuICAgIHByaXZhdGUgX2F0dGFjaGVkUG9wb3ZlcjtcbiAgICAvKiogRW1pdHMgd2hlbiB0aGUgcG9wb3ZlciBpcyBvcGVuZWQuICovXG4gICAgcG9wb3Zlck9wZW5lZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIC8qKiBFbWl0cyB3aGVuIHRoZSBwb3BvdmVyIGlzIGNsb3NlZC4gKi9cbiAgICBwb3BvdmVyQ2xvc2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKiogRW1pdHMgd2hlbiB0aGUgZGlyZWN0aXZlIGlzIGRlc3Ryb3llZC4gKi9cbiAgICBwcml2YXRlIF9vbkRlc3Ryb3k7XG4gICAgY29uc3RydWN0b3IoX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIF92aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBfYW5jaG9yaW5nOiBTYXRQb3BvdmVyQW5jaG9yaW5nU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKiBHZXRzIHdoZXRoZXIgdGhlIHBvcG92ZXIgaXMgcHJlc2VudGx5IG9wZW4uICovXG4gICAgaXNQb3BvdmVyT3BlbigpOiBib29sZWFuO1xuICAgIC8qKiBUb2dnbGVzIHRoZSBwb3BvdmVyIGJldHdlZW4gdGhlIG9wZW4gYW5kIGNsb3NlZCBzdGF0ZXMuICovXG4gICAgdG9nZ2xlUG9wb3ZlcigpOiB2b2lkO1xuICAgIC8qKiBPcGVucyB0aGUgcG9wb3Zlci4gKi9cbiAgICBvcGVuUG9wb3ZlcihvcHRpb25zPzogU2F0UG9wb3Zlck9wZW5PcHRpb25zKTogdm9pZDtcbiAgICAvKiogQ2xvc2VzIHRoZSBwb3BvdmVyLiAqL1xuICAgIGNsb3NlUG9wb3Zlcih2YWx1ZT86IGFueSk6IHZvaWQ7XG4gICAgLyoqIFJlYWxpZ24gdGhlIHBvcG92ZXIgdG8gdGhlIGFuY2hvci4gKi9cbiAgICByZWFsaWduUG9wb3ZlcigpOiB2b2lkO1xuICAgIC8qKiBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGFuY2hvciBlbGVtZW50LiAqL1xuICAgIGdldEVsZW1lbnQoKTogRWxlbWVudFJlZjtcbiAgICAvKiogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBwb3BvdmVyIGluc3RhbmNlIGlzIG5vdCBwcm92aWRlZC4gKi9cbiAgICBwcml2YXRlIF92YWxpZGF0ZUF0dGFjaGVkUG9wb3Zlcjtcbn1cbiJdfQ==