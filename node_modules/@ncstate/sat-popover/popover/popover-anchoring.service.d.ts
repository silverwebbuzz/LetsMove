import { ElementRef, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';
import { Overlay, OverlayRef } from '@angular/cdk/overlay';
import { Directionality } from '@angular/cdk/bidi';
import { Subject } from 'rxjs';
import { SatPopover } from './popover.component';
import { SatPopoverOpenOptions } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class SatPopoverAnchoringService implements OnDestroy {
    private _overlay;
    private _ngZone;
    private _dir;
    /** Emits when the popover is opened. */
    popoverOpened: Subject<void>;
    /** Emits when the popover is closed. */
    popoverClosed: Subject<void>;
    /** Reference to the overlay containing the popover component. */
    _overlayRef: OverlayRef;
    /** Reference to the target popover. */
    private _popover;
    /** Reference to the view container for the popover template. */
    private _viewContainerRef;
    /** Reference to the anchor element. */
    private _anchor;
    /** Reference to a template portal where the overlay will be attached. */
    private _portal;
    /** Communications channel with the popover. */
    private _notifications;
    /** Single subscription to notifications service events. */
    private _notificationsSubscription;
    /** Single subscription to position changes. */
    private _positionChangeSubscription;
    /** Whether the popover is presently open. */
    private _popoverOpen;
    /** Emits when the service is destroyed. */
    private _onDestroy;
    constructor(_overlay: Overlay, _ngZone: NgZone, _dir: Directionality);
    ngOnDestroy(): void;
    /** Anchor a popover instance to a view and connection element. */
    anchor(popover: SatPopover, viewContainerRef: ViewContainerRef, anchor: ElementRef): void;
    /** Gets whether the popover is presently open. */
    isPopoverOpen(): boolean;
    /** Toggles the popover between the open and closed states. */
    togglePopover(): void;
    /** Opens the popover. */
    openPopover(options?: SatPopoverOpenOptions): void;
    /** Closes the popover. */
    closePopover(value?: any): void;
    /** Realign the popover to the anchor. */
    realignPopoverToAnchor(): void;
    /** Get a reference to the anchor element. */
    getAnchorElement(): ElementRef;
    /** Apply behavior properties on the popover based on the open options. */
    private _applyOpenOptions;
    /** Create an overlay to be attached to the portal. */
    private _createOverlay;
    /** Removes the popover from the DOM. Does NOT update open state. */
    private _destroyPopover;
    /**
     * Destroys the popover immediately if it is closed, or waits until it
     * has been closed to destroy it.
     */
    private _destroyPopoverOnceClosed;
    /**
     * Call appropriate anchor method when an event is dispatched through
     * the notification service.
     */
    private _subscribeToNotifications;
    /** Close popover when backdrop is clicked. */
    private _subscribeToBackdrop;
    /** Close popover when escape keydown event occurs. */
    private _subscribeToEscape;
    /** Set state back to closed when detached. */
    private _subscribeToDetachments;
    /** Save the opened state of the popover and emit. */
    private _saveOpenedState;
    /** Save the closed state of the popover and emit. */
    private _saveClosedState;
    /** Gets the text direction of the containing app. */
    private _getDirection;
    /** Create and return a config for creating the overlay. */
    private _getOverlayConfig;
    /**
     * Listen to changes in the position of the overlay and set the correct alignment classes,
     * ensuring that the animation origin is correct, even with a fallback position.
     */
    private _subscribeToPositionChanges;
    /** Map a scroll strategy string type to an instance of a scroll strategy. */
    private _getScrollStrategyInstance;
    /** Create and return a position strategy based on config provided to the component instance. */
    private _getPositionStrategy;
    /** Get fallback positions based around target alignments. */
    private _getFallbacks;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SatPopoverAnchoringService, [null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SatPopoverAnchoringService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1hbmNob3Jpbmcuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJwb3BvdmVyLWFuY2hvcmluZy5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE5nWm9uZSwgT25EZXN0cm95LCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPdmVybGF5LCBPdmVybGF5UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgRGlyZWN0aW9uYWxpdHkgfSBmcm9tICdAYW5ndWxhci9jZGsvYmlkaSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBTYXRQb3BvdmVyIH0gZnJvbSAnLi9wb3BvdmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTYXRQb3BvdmVyT3Blbk9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNhdFBvcG92ZXJBbmNob3JpbmdTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9vdmVybGF5O1xuICAgIHByaXZhdGUgX25nWm9uZTtcbiAgICBwcml2YXRlIF9kaXI7XG4gICAgLyoqIEVtaXRzIHdoZW4gdGhlIHBvcG92ZXIgaXMgb3BlbmVkLiAqL1xuICAgIHBvcG92ZXJPcGVuZWQ6IFN1YmplY3Q8dm9pZD47XG4gICAgLyoqIEVtaXRzIHdoZW4gdGhlIHBvcG92ZXIgaXMgY2xvc2VkLiAqL1xuICAgIHBvcG92ZXJDbG9zZWQ6IFN1YmplY3Q8dm9pZD47XG4gICAgLyoqIFJlZmVyZW5jZSB0byB0aGUgb3ZlcmxheSBjb250YWluaW5nIHRoZSBwb3BvdmVyIGNvbXBvbmVudC4gKi9cbiAgICBfb3ZlcmxheVJlZjogT3ZlcmxheVJlZjtcbiAgICAvKiogUmVmZXJlbmNlIHRvIHRoZSB0YXJnZXQgcG9wb3Zlci4gKi9cbiAgICBwcml2YXRlIF9wb3BvdmVyO1xuICAgIC8qKiBSZWZlcmVuY2UgdG8gdGhlIHZpZXcgY29udGFpbmVyIGZvciB0aGUgcG9wb3ZlciB0ZW1wbGF0ZS4gKi9cbiAgICBwcml2YXRlIF92aWV3Q29udGFpbmVyUmVmO1xuICAgIC8qKiBSZWZlcmVuY2UgdG8gdGhlIGFuY2hvciBlbGVtZW50LiAqL1xuICAgIHByaXZhdGUgX2FuY2hvcjtcbiAgICAvKiogUmVmZXJlbmNlIHRvIGEgdGVtcGxhdGUgcG9ydGFsIHdoZXJlIHRoZSBvdmVybGF5IHdpbGwgYmUgYXR0YWNoZWQuICovXG4gICAgcHJpdmF0ZSBfcG9ydGFsO1xuICAgIC8qKiBDb21tdW5pY2F0aW9ucyBjaGFubmVsIHdpdGggdGhlIHBvcG92ZXIuICovXG4gICAgcHJpdmF0ZSBfbm90aWZpY2F0aW9ucztcbiAgICAvKiogU2luZ2xlIHN1YnNjcmlwdGlvbiB0byBub3RpZmljYXRpb25zIHNlcnZpY2UgZXZlbnRzLiAqL1xuICAgIHByaXZhdGUgX25vdGlmaWNhdGlvbnNTdWJzY3JpcHRpb247XG4gICAgLyoqIFNpbmdsZSBzdWJzY3JpcHRpb24gdG8gcG9zaXRpb24gY2hhbmdlcy4gKi9cbiAgICBwcml2YXRlIF9wb3NpdGlvbkNoYW5nZVN1YnNjcmlwdGlvbjtcbiAgICAvKiogV2hldGhlciB0aGUgcG9wb3ZlciBpcyBwcmVzZW50bHkgb3Blbi4gKi9cbiAgICBwcml2YXRlIF9wb3BvdmVyT3BlbjtcbiAgICAvKiogRW1pdHMgd2hlbiB0aGUgc2VydmljZSBpcyBkZXN0cm95ZWQuICovXG4gICAgcHJpdmF0ZSBfb25EZXN0cm95O1xuICAgIGNvbnN0cnVjdG9yKF9vdmVybGF5OiBPdmVybGF5LCBfbmdab25lOiBOZ1pvbmUsIF9kaXI6IERpcmVjdGlvbmFsaXR5KTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKiBBbmNob3IgYSBwb3BvdmVyIGluc3RhbmNlIHRvIGEgdmlldyBhbmQgY29ubmVjdGlvbiBlbGVtZW50LiAqL1xuICAgIGFuY2hvcihwb3BvdmVyOiBTYXRQb3BvdmVyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBhbmNob3I6IEVsZW1lbnRSZWYpOiB2b2lkO1xuICAgIC8qKiBHZXRzIHdoZXRoZXIgdGhlIHBvcG92ZXIgaXMgcHJlc2VudGx5IG9wZW4uICovXG4gICAgaXNQb3BvdmVyT3BlbigpOiBib29sZWFuO1xuICAgIC8qKiBUb2dnbGVzIHRoZSBwb3BvdmVyIGJldHdlZW4gdGhlIG9wZW4gYW5kIGNsb3NlZCBzdGF0ZXMuICovXG4gICAgdG9nZ2xlUG9wb3ZlcigpOiB2b2lkO1xuICAgIC8qKiBPcGVucyB0aGUgcG9wb3Zlci4gKi9cbiAgICBvcGVuUG9wb3ZlcihvcHRpb25zPzogU2F0UG9wb3Zlck9wZW5PcHRpb25zKTogdm9pZDtcbiAgICAvKiogQ2xvc2VzIHRoZSBwb3BvdmVyLiAqL1xuICAgIGNsb3NlUG9wb3Zlcih2YWx1ZT86IGFueSk6IHZvaWQ7XG4gICAgLyoqIFJlYWxpZ24gdGhlIHBvcG92ZXIgdG8gdGhlIGFuY2hvci4gKi9cbiAgICByZWFsaWduUG9wb3ZlclRvQW5jaG9yKCk6IHZvaWQ7XG4gICAgLyoqIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgYW5jaG9yIGVsZW1lbnQuICovXG4gICAgZ2V0QW5jaG9yRWxlbWVudCgpOiBFbGVtZW50UmVmO1xuICAgIC8qKiBBcHBseSBiZWhhdmlvciBwcm9wZXJ0aWVzIG9uIHRoZSBwb3BvdmVyIGJhc2VkIG9uIHRoZSBvcGVuIG9wdGlvbnMuICovXG4gICAgcHJpdmF0ZSBfYXBwbHlPcGVuT3B0aW9ucztcbiAgICAvKiogQ3JlYXRlIGFuIG92ZXJsYXkgdG8gYmUgYXR0YWNoZWQgdG8gdGhlIHBvcnRhbC4gKi9cbiAgICBwcml2YXRlIF9jcmVhdGVPdmVybGF5O1xuICAgIC8qKiBSZW1vdmVzIHRoZSBwb3BvdmVyIGZyb20gdGhlIERPTS4gRG9lcyBOT1QgdXBkYXRlIG9wZW4gc3RhdGUuICovXG4gICAgcHJpdmF0ZSBfZGVzdHJveVBvcG92ZXI7XG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIHBvcG92ZXIgaW1tZWRpYXRlbHkgaWYgaXQgaXMgY2xvc2VkLCBvciB3YWl0cyB1bnRpbCBpdFxuICAgICAqIGhhcyBiZWVuIGNsb3NlZCB0byBkZXN0cm95IGl0LlxuICAgICAqL1xuICAgIHByaXZhdGUgX2Rlc3Ryb3lQb3BvdmVyT25jZUNsb3NlZDtcbiAgICAvKipcbiAgICAgKiBDYWxsIGFwcHJvcHJpYXRlIGFuY2hvciBtZXRob2Qgd2hlbiBhbiBldmVudCBpcyBkaXNwYXRjaGVkIHRocm91Z2hcbiAgICAgKiB0aGUgbm90aWZpY2F0aW9uIHNlcnZpY2UuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfc3Vic2NyaWJlVG9Ob3RpZmljYXRpb25zO1xuICAgIC8qKiBDbG9zZSBwb3BvdmVyIHdoZW4gYmFja2Ryb3AgaXMgY2xpY2tlZC4gKi9cbiAgICBwcml2YXRlIF9zdWJzY3JpYmVUb0JhY2tkcm9wO1xuICAgIC8qKiBDbG9zZSBwb3BvdmVyIHdoZW4gZXNjYXBlIGtleWRvd24gZXZlbnQgb2NjdXJzLiAqL1xuICAgIHByaXZhdGUgX3N1YnNjcmliZVRvRXNjYXBlO1xuICAgIC8qKiBTZXQgc3RhdGUgYmFjayB0byBjbG9zZWQgd2hlbiBkZXRhY2hlZC4gKi9cbiAgICBwcml2YXRlIF9zdWJzY3JpYmVUb0RldGFjaG1lbnRzO1xuICAgIC8qKiBTYXZlIHRoZSBvcGVuZWQgc3RhdGUgb2YgdGhlIHBvcG92ZXIgYW5kIGVtaXQuICovXG4gICAgcHJpdmF0ZSBfc2F2ZU9wZW5lZFN0YXRlO1xuICAgIC8qKiBTYXZlIHRoZSBjbG9zZWQgc3RhdGUgb2YgdGhlIHBvcG92ZXIgYW5kIGVtaXQuICovXG4gICAgcHJpdmF0ZSBfc2F2ZUNsb3NlZFN0YXRlO1xuICAgIC8qKiBHZXRzIHRoZSB0ZXh0IGRpcmVjdGlvbiBvZiB0aGUgY29udGFpbmluZyBhcHAuICovXG4gICAgcHJpdmF0ZSBfZ2V0RGlyZWN0aW9uO1xuICAgIC8qKiBDcmVhdGUgYW5kIHJldHVybiBhIGNvbmZpZyBmb3IgY3JlYXRpbmcgdGhlIG92ZXJsYXkuICovXG4gICAgcHJpdmF0ZSBfZ2V0T3ZlcmxheUNvbmZpZztcbiAgICAvKipcbiAgICAgKiBMaXN0ZW4gdG8gY2hhbmdlcyBpbiB0aGUgcG9zaXRpb24gb2YgdGhlIG92ZXJsYXkgYW5kIHNldCB0aGUgY29ycmVjdCBhbGlnbm1lbnQgY2xhc3NlcyxcbiAgICAgKiBlbnN1cmluZyB0aGF0IHRoZSBhbmltYXRpb24gb3JpZ2luIGlzIGNvcnJlY3QsIGV2ZW4gd2l0aCBhIGZhbGxiYWNrIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIHByaXZhdGUgX3N1YnNjcmliZVRvUG9zaXRpb25DaGFuZ2VzO1xuICAgIC8qKiBNYXAgYSBzY3JvbGwgc3RyYXRlZ3kgc3RyaW5nIHR5cGUgdG8gYW4gaW5zdGFuY2Ugb2YgYSBzY3JvbGwgc3RyYXRlZ3kuICovXG4gICAgcHJpdmF0ZSBfZ2V0U2Nyb2xsU3RyYXRlZ3lJbnN0YW5jZTtcbiAgICAvKiogQ3JlYXRlIGFuZCByZXR1cm4gYSBwb3NpdGlvbiBzdHJhdGVneSBiYXNlZCBvbiBjb25maWcgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpbnN0YW5jZS4gKi9cbiAgICBwcml2YXRlIF9nZXRQb3NpdGlvblN0cmF0ZWd5O1xuICAgIC8qKiBHZXQgZmFsbGJhY2sgcG9zaXRpb25zIGJhc2VkIGFyb3VuZCB0YXJnZXQgYWxpZ25tZW50cy4gKi9cbiAgICBwcml2YXRlIF9nZXRGYWxsYmFja3M7XG59XG4iXX0=