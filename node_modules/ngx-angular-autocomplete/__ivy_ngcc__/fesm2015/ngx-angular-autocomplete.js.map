{"version":3,"file":"ngx-angular-autocomplete.js","sources":["ng:/ngx-angular-autocomplete/lib/ngx-autocomplete.service.ts","ng:/ngx-angular-autocomplete/lib/ngx-autocomplete.component.ts","ng:/ngx-angular-autocomplete/lib/dropdown.directive.ts","ng:/ngx-angular-autocomplete/lib/ngx-autocomplete.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxAutocompleteService {\n\n  constructor() { }\n}\n","import { Component, OnInit, ViewChild, ElementRef, Output, EventEmitter, Input } from '@angular/core';\nimport { of, fromEvent, Observable } from \"rxjs\";\nimport { debounceTime, map, distinctUntilChanged, switchMap, tap } from \"rxjs/operators\";\n\n@Component({\n  selector: 'ngx-autocomplete',\n  template: `\n    <div class=\"position-relative\">\n\n    <input type=\"text\" class=\"form-control\" [placeholder]=\"placeholderValue\" id=\"auto-search\" #searchInput autocomplete=\"off\" [id]=\"inputId+1\" (click)=\"showSearches = true\" (keyup)=\"changeSuggestion($event)\">\n    \n    <div [id]=\"inputId+2\" clickOutside (clickOutside)=\"closeDropDown()\" [inputId]=\"inputId+1\" [hidden]=\"!showSearches\" class=\"dropdown-content\">\n        <a *ngFor=\"let entry of data; trackBy: trackById;let i = index\" tappable (click)=\"setValue(entry)\"  [ngClass]=\"{ 'suggestion-active' : i == activeSuggestion} \" id=\"list{{i}}\">\n                {{entry[searchKeyword] }}   \n        </a>\n        <a *ngIf=\"data && data.length <= 0 && !isSearching\" >No Data Found</a>\n        <a *ngIf=\"isSearching\">Searching...</a>\n    </div>\n    \n  </div>\n  `,\n  styles: [`\n  \n    .dropdown-content {\n      background-color: #fafafa;\n      width: 100%;\n      max-height: 150px;\n      overflow-y: auto;\n      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n      z-index: 1;\n      cursor: pointer;\n    }\n\n    .dropdown-content a {\n      color: black;\n      padding: 15px 18px;\n      text-decoration: none;\n      display: block;\n    }\n\n    .suggestion-active, .dropdown-content a:hover {background-color: #f1f1f1}\n\n    input {\n      width: 100%;\n      padding: 12px 20px;\n      margin: 8px 0;\n      box-sizing: border-box;\n    }\n \n  `]\n})\nexport class NgxAutocompleteComponent implements OnInit {\n\n  @Input() entries: Array<any>;\n  @Input() placeholderValue: string;\n  @Input() inputId: string;\n  @Input() searchKeyword: any;\n  @ViewChild('searchInput', { static: true }) searchInput: ElementRef;\n  @Output() selectedValue = new EventEmitter<any>();\n\n  data: any = [];\n  showSearches: boolean = false;\n  isSearching: boolean = false;\n  activeSuggestion = 0;\n  searchValue: any;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.dataSearch();\n  }\n\n  getData(name): Observable<any> {\n    let data = this.entries.filter((val) => {\n      return val[this.searchKeyword].toLowerCase().includes(name.toLowerCase()) == true;\n    })\n    return of(data);\n  }\n\n  dataSearch() {\n    const search$ = fromEvent(this.searchInput.nativeElement, 'input').pipe(\n      map((event: any) => event.target.value),\n      debounceTime(500),\n      tap(() => this.isSearching = true),\n      switchMap((term) => term ? this.getData(term) : of([])),\n      tap(() => {\n        this.isSearching = false,\n          this.showSearches = true;\n      }));\n\n    search$.subscribe(data => {\n      this.isSearching = false\n      this.data = data;\n    })\n  }\n\n  setValue(data) {\n    let value = data[this.searchKeyword];\n    this.searchInput.nativeElement.value = value;\n    this.data = [data];\n    this.activeSuggestion = 0;\n    this.selectedValue.emit(data);\n    this.showSearches = false;\n  }\n\n\n  trackById(index, item): void {\n    return item._id;\n  }\n\n  closeDropDown(): void {\n    this.showSearches = false;\n  }\n\n  changeSuggestion(e) {\n    if (e.keyCode === 13) {\n      if( this.data.length != 0) {\n        this.setValue(this.data[this.activeSuggestion])\n        this.scrollTo();\n      }\n    }\n    // User pressed the up arrow\n    else if (e.keyCode == 38) {\n      if (this.activeSuggestion == 0) {\n        return false;\n      }\n      else {\n        this.activeSuggestion = this.activeSuggestion - 1;\n        this.scrollTo();\n      }\n    }\n    // User pressed the down arrow\n    else if (e.keyCode == 40) {\n      if (this.activeSuggestion == this.data.length - 1) {\n        return false;\n      }\n      else {\n        this.activeSuggestion = this.activeSuggestion + 1;\n        this.scrollTo();\n      }\n    }\n  }\n\n  private scrollTo() {\n    let str = `list${this.activeSuggestion}`;\n    let elmnt = document.getElementById(str);\n    elmnt.scrollIntoView();\n    window.scrollTo(0, 0);\n  }\n\n}\n","import { Directive, ElementRef, Output, EventEmitter, HostListener, Input } from '@angular/core';\n\n@Directive({\n    selector: '[clickOutside]',\n})\nexport class DropdownDirective {\n    @Output() public clickOutside = new EventEmitter();\n    @Input() inputId: any;\n    constructor(private _elementRef: ElementRef) {\n    }\n\n    @HostListener('document:click', ['$event.target'])\n    public onClick(targetElement) {\n        if (targetElement.id == this.inputId) { return; }\n        const isClickedInside = this._elementRef.nativeElement.contains(targetElement);\n        if (!isClickedInside) {\n            this.clickOutside.emit(null);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { NgxAutocompleteComponent } from './ngx-autocomplete.component';\nimport { CommonModule } from '@angular/common';\nimport { DropdownDirective } from './dropdown.directive';\n\n\n\n@NgModule({\n  declarations: [\n    NgxAutocompleteComponent,\n    DropdownDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    NgxAutocompleteComponent\n  ]\n})\nexport class NgxAutocompleteModule { }\n"]}