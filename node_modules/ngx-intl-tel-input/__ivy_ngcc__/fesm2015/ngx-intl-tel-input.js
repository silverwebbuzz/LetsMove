import { __decorate, __metadata } from 'tslib';
import { ɵɵdefineInjectable, Injectable, EventEmitter, Input, Output, ViewChild, ElementRef, Component, forwardRef, Directive, NgModule } from '@angular/core';
import { PhoneNumberUtil, PhoneNumberFormat } from 'google-libphonenumber';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'ngx-bootstrap/dropdown';
import * as ɵngcc3 from 'ngx-bootstrap/tooltip';
import * as ɵngcc4 from '@angular/forms';

const _c0 = ["countryList"];
function NgxIntlTelInputComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("+", ctx_r0.selectedCountry.dialCode, "");
} }
function NgxIntlTelInputComponent_div_6_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵelementStart(1, "input", 18);
    ɵngcc0.ɵɵlistener("ngModelChange", function NgxIntlTelInputComponent_div_6_div_1_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.countrySearchText = $event; })("keyup", function NgxIntlTelInputComponent_div_6_div_1_Template_input_keyup_1_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.searchCountry(); })("click", function NgxIntlTelInputComponent_div_6_div_1_Template_input_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.countrySearchText)("placeholder", ctx_r3.searchCountryPlaceholder);
} }
function NgxIntlTelInputComponent_div_6_li_4_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 19);
    ɵngcc0.ɵɵlistener("click", function NgxIntlTelInputComponent_div_6_li_4_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r14); const country_r12 = ctx.$implicit; const ctx_r13 = ɵngcc0.ɵɵnextContext(2); const _r2 = ɵngcc0.ɵɵreference(8); return ctx_r13.onCountrySelect(country_r12, _r2); });
    ɵngcc0.ɵɵelementStart(1, "div", 20);
    ɵngcc0.ɵɵelement(2, "div", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 22);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 23);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const country_r12 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("id", country_r12.htmlId + "-preferred");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", country_r12.flagClass);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(country_r12.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("+", country_r12.dialCode, "");
} }
function NgxIntlTelInputComponent_div_6_li_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "li", 24);
} }
function NgxIntlTelInputComponent_div_6_li_6_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 25);
    ɵngcc0.ɵɵlistener("click", function NgxIntlTelInputComponent_div_6_li_6_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const country_r15 = ctx.$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(2); const _r2 = ɵngcc0.ɵɵreference(8); return ctx_r16.onCountrySelect(country_r15, _r2); });
    ɵngcc0.ɵɵelementStart(1, "div", 20);
    ɵngcc0.ɵɵelement(2, "div", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 22);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 23);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const country_r15 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("id", country_r15.htmlId);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", country_r15.flagClass);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(country_r15.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("+", country_r15.dialCode, "");
} }
function NgxIntlTelInputComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵtemplate(1, NgxIntlTelInputComponent_div_6_div_1_Template, 2, 2, "div", 11);
    ɵngcc0.ɵɵelementStart(2, "ul", 12, 13);
    ɵngcc0.ɵɵtemplate(4, NgxIntlTelInputComponent_div_6_li_4_Template, 7, 4, "li", 14);
    ɵngcc0.ɵɵtemplate(5, NgxIntlTelInputComponent_div_6_li_5_Template, 1, 0, "li", 15);
    ɵngcc0.ɵɵtemplate(6, NgxIntlTelInputComponent_div_6_li_6_Template, 7, 4, "li", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.searchCountryFlag && ctx_r1.searchCountryField);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.preferredCountriesInDropDown);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.preferredCountriesInDropDown == null ? null : ctx_r1.preferredCountriesInDropDown.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.allCountries);
} }
const _c1 = function (a0) { return { "disabled": a0 }; };
let NgxIntlTelInputService = class NgxIntlTelInputService {
    constructor() { }
};
NgxIntlTelInputService.ɵfac = function NgxIntlTelInputService_Factory(t) { return new (t || NgxIntlTelInputService)(); };
NgxIntlTelInputService.ɵprov = ɵɵdefineInjectable({ factory: function NgxIntlTelInputService_Factory() { return new NgxIntlTelInputService(); }, token: NgxIntlTelInputService, providedIn: "root" });
NgxIntlTelInputService = __decorate([ __metadata("design:paramtypes", [])
], NgxIntlTelInputService);

var CountryISO;
(function (CountryISO) {
    CountryISO["Afghanistan"] = "af";
    CountryISO["Albania"] = "al";
    CountryISO["Algeria"] = "dz";
    CountryISO["AmericanSamoa"] = "as";
    CountryISO["Andorra"] = "ad";
    CountryISO["Angola"] = "ao";
    CountryISO["Anguilla"] = "ai";
    CountryISO["AntiguaAndBarbuda"] = "ag";
    CountryISO["Argentina"] = "ar";
    CountryISO["Armenia"] = "am";
    CountryISO["Aruba"] = "aw";
    CountryISO["Australia"] = "au";
    CountryISO["Austria"] = "at";
    CountryISO["Azerbaijan"] = "az";
    CountryISO["Bahamas"] = "bs";
    CountryISO["Bahrain"] = "bh";
    CountryISO["Bangladesh"] = "bd";
    CountryISO["Barbados"] = "bb";
    CountryISO["Belarus"] = "by";
    CountryISO["Belgium"] = "be";
    CountryISO["Belize"] = "bz";
    CountryISO["Benin"] = "bj";
    CountryISO["Bermuda"] = "bm";
    CountryISO["Bhutan"] = "bt";
    CountryISO["Bolivia"] = "bo";
    CountryISO["BosniaAndHerzegovina"] = "ba";
    CountryISO["Botswana"] = "bw";
    CountryISO["Brazil"] = "br";
    CountryISO["BritishIndianOceanTerritory"] = "io";
    CountryISO["BritishVirginIslands"] = "vg";
    CountryISO["Brunei"] = "bn";
    CountryISO["Bulgaria"] = "bg";
    CountryISO["BurkinaFaso"] = "bf";
    CountryISO["Burundi"] = "bi";
    CountryISO["Cambodia"] = "kh";
    CountryISO["Cameroon"] = "cm";
    CountryISO["Canada"] = "ca";
    CountryISO["CapeVerde"] = "cv";
    CountryISO["CaribbeanNetherlands"] = "bq";
    CountryISO["CaymanIslands"] = "ky";
    CountryISO["CentralAfricanRepublic"] = "cf";
    CountryISO["Chad"] = "td";
    CountryISO["Chile"] = "cl";
    CountryISO["China"] = "cn";
    CountryISO["ChristmasIsland"] = "cx";
    CountryISO["Cocos"] = "cc";
    CountryISO["Colombia"] = "co";
    CountryISO["Comoros"] = "km";
    CountryISO["CongoDRCJamhuriYaKidemokrasiaYaKongo"] = "cd";
    CountryISO["CongoRepublicCongoBrazzaville"] = "cg";
    CountryISO["CookIslands"] = "ck";
    CountryISO["CostaRica"] = "cr";
    CountryISO["C\u00F4teDIvoire"] = "ci";
    CountryISO["Croatia"] = "hr";
    CountryISO["Cuba"] = "cu";
    CountryISO["Cura\u00E7ao"] = "cw";
    CountryISO["Cyprus"] = "cy";
    CountryISO["CzechRepublic"] = "cz";
    CountryISO["Denmark"] = "dk";
    CountryISO["Djibouti"] = "dj";
    CountryISO["Dominica"] = "dm";
    CountryISO["DominicanRepublic"] = "do";
    CountryISO["Ecuador"] = "ec";
    CountryISO["Egypt"] = "eg";
    CountryISO["ElSalvador"] = "sv";
    CountryISO["EquatorialGuinea"] = "gq";
    CountryISO["Eritrea"] = "er";
    CountryISO["Estonia"] = "ee";
    CountryISO["Ethiopia"] = "et";
    CountryISO["FalklandIslands"] = "fk";
    CountryISO["FaroeIslands"] = "fo";
    CountryISO["Fiji"] = "fj";
    CountryISO["Finland"] = "fi";
    CountryISO["France"] = "fr";
    CountryISO["FrenchGuiana"] = "gf";
    CountryISO["FrenchPolynesia"] = "pf";
    CountryISO["Gabon"] = "ga";
    CountryISO["Gambia"] = "gm";
    CountryISO["Georgia"] = "ge";
    CountryISO["Germany"] = "de";
    CountryISO["Ghana"] = "gh";
    CountryISO["Gibraltar"] = "gi";
    CountryISO["Greece"] = "gr";
    CountryISO["Greenland"] = "gl";
    CountryISO["Grenada"] = "gd";
    CountryISO["Guadeloupe"] = "gp";
    CountryISO["Guam"] = "gu";
    CountryISO["Guatemala"] = "gt";
    CountryISO["Guernsey"] = "gg";
    CountryISO["Guinea"] = "gn";
    CountryISO["GuineaBissau"] = "gw";
    CountryISO["Guyana"] = "gy";
    CountryISO["Haiti"] = "ht";
    CountryISO["Honduras"] = "hn";
    CountryISO["HongKong"] = "hk";
    CountryISO["Hungary"] = "hu";
    CountryISO["Iceland"] = "is";
    CountryISO["India"] = "in";
    CountryISO["Indonesia"] = "id";
    CountryISO["Iran"] = "ir";
    CountryISO["Iraq"] = "iq";
    CountryISO["Ireland"] = "ie";
    CountryISO["IsleOfMan"] = "im";
    CountryISO["Israel"] = "il";
    CountryISO["Italy"] = "it";
    CountryISO["Jamaica"] = "jm";
    CountryISO["Japan"] = "jp";
    CountryISO["Jersey"] = "je";
    CountryISO["Jordan"] = "jo";
    CountryISO["Kazakhstan"] = "kz";
    CountryISO["Kenya"] = "ke";
    CountryISO["Kiribati"] = "ki";
    CountryISO["Kosovo"] = "xk";
    CountryISO["Kuwait"] = "kw";
    CountryISO["Kyrgyzstan"] = "kg";
    CountryISO["Laos"] = "la";
    CountryISO["Latvia"] = "lv";
    CountryISO["Lebanon"] = "lb";
    CountryISO["Lesotho"] = "ls";
    CountryISO["Liberia"] = "lr";
    CountryISO["Libya"] = "ly";
    CountryISO["Liechtenstein"] = "li";
    CountryISO["Lithuania"] = "lt";
    CountryISO["Luxembourg"] = "lu";
    CountryISO["Macau"] = "mo";
    CountryISO["Macedonia"] = "mk";
    CountryISO["Madagascar"] = "mg";
    CountryISO["Malawi"] = "mw";
    CountryISO["Malaysia"] = "my";
    CountryISO["Maldives"] = "mv";
    CountryISO["Mali"] = "ml";
    CountryISO["Malta"] = "mt";
    CountryISO["MarshallIslands"] = "mh";
    CountryISO["Martinique"] = "mq";
    CountryISO["Mauritania"] = "mr";
    CountryISO["Mauritius"] = "mu";
    CountryISO["Mayotte"] = "yt";
    CountryISO["Mexico"] = "mx";
    CountryISO["Micronesia"] = "fm";
    CountryISO["Moldova"] = "md";
    CountryISO["Monaco"] = "mc";
    CountryISO["Mongolia"] = "mn";
    CountryISO["Montenegro"] = "me";
    CountryISO["Montserrat"] = "ms";
    CountryISO["Morocco"] = "ma";
    CountryISO["Mozambique"] = "mz";
    CountryISO["Myanmar"] = "mm";
    CountryISO["Namibia"] = "na";
    CountryISO["Nauru"] = "nr";
    CountryISO["Nepal"] = "np";
    CountryISO["Netherlands"] = "nl";
    CountryISO["NewCaledonia"] = "nc";
    CountryISO["NewZealand"] = "nz";
    CountryISO["Nicaragua"] = "ni";
    CountryISO["Niger"] = "ne";
    CountryISO["Nigeria"] = "ng";
    CountryISO["Niue"] = "nu";
    CountryISO["NorfolkIsland"] = "nf";
    CountryISO["NorthKorea"] = "kp";
    CountryISO["NorthernMarianaIslands"] = "mp";
    CountryISO["Norway"] = "no";
    CountryISO["Oman"] = "om";
    CountryISO["Pakistan"] = "pk";
    CountryISO["Palau"] = "pw";
    CountryISO["Palestine"] = "ps";
    CountryISO["Panama"] = "pa";
    CountryISO["PapuaNewGuinea"] = "pg";
    CountryISO["Paraguay"] = "py";
    CountryISO["Peru"] = "pe";
    CountryISO["Philippines"] = "ph";
    CountryISO["Poland"] = "pl";
    CountryISO["Portugal"] = "pt";
    CountryISO["PuertoRico"] = "pr";
    CountryISO["Qatar"] = "qa";
    CountryISO["R\u00E9union"] = "re";
    CountryISO["Romania"] = "ro";
    CountryISO["Russia"] = "ru";
    CountryISO["Rwanda"] = "rw";
    CountryISO["SaintBarth\u00E9lemy"] = "bl";
    CountryISO["SaintHelena"] = "sh";
    CountryISO["SaintKittsAndNevis"] = "kn";
    CountryISO["SaintLucia"] = "lc";
    CountryISO["SaintMartin"] = "mf";
    CountryISO["SaintPierreAndMiquelon"] = "pm";
    CountryISO["SaintVincentAndTheGrenadines"] = "vc";
    CountryISO["Samoa"] = "ws";
    CountryISO["SanMarino"] = "sm";
    CountryISO["S\u00E3oTom\u00E9AndPr\u00EDncipe"] = "st";
    CountryISO["SaudiArabia"] = "sa";
    CountryISO["Senegal"] = "sn";
    CountryISO["Serbia"] = "rs";
    CountryISO["Seychelles"] = "sc";
    CountryISO["SierraLeone"] = "sl";
    CountryISO["Singapore"] = "sg";
    CountryISO["SintMaarten"] = "sx";
    CountryISO["Slovakia"] = "sk";
    CountryISO["Slovenia"] = "si";
    CountryISO["SolomonIslands"] = "sb";
    CountryISO["Somalia"] = "so";
    CountryISO["SouthAfrica"] = "za";
    CountryISO["SouthKorea"] = "kr";
    CountryISO["SouthSudan"] = "ss";
    CountryISO["Spain"] = "es";
    CountryISO["SriLanka"] = "lk";
    CountryISO["Sudan"] = "sd";
    CountryISO["Suriname"] = "sr";
    CountryISO["SvalbardAndJanMayen"] = "sj";
    CountryISO["Swaziland"] = "sz";
    CountryISO["Sweden"] = "se";
    CountryISO["Switzerland"] = "ch";
    CountryISO["Syria"] = "sy";
    CountryISO["Taiwan"] = "tw";
    CountryISO["Tajikistan"] = "tj";
    CountryISO["Tanzania"] = "tz";
    CountryISO["Thailand"] = "th";
    CountryISO["TimorLeste"] = "tl";
    CountryISO["Togo"] = "tg";
    CountryISO["Tokelau"] = "tk";
    CountryISO["Tonga"] = "to";
    CountryISO["TrinidadAndTobago"] = "tt";
    CountryISO["Tunisia"] = "tn";
    CountryISO["Turkey"] = "tr";
    CountryISO["Turkmenistan"] = "tm";
    CountryISO["TurksAndCaicosIslands"] = "tc";
    CountryISO["Tuvalu"] = "tv";
    CountryISO["USVirginIslands"] = "vi";
    CountryISO["Uganda"] = "ug";
    CountryISO["Ukraine"] = "ua";
    CountryISO["UnitedArabEmirates"] = "ae";
    CountryISO["UnitedKingdom"] = "gb";
    CountryISO["UnitedStates"] = "us";
    CountryISO["Uruguay"] = "uy";
    CountryISO["Uzbekistan"] = "uz";
    CountryISO["Vanuatu"] = "vu";
    CountryISO["VaticanCity"] = "va";
    CountryISO["Venezuela"] = "ve";
    CountryISO["Vietnam"] = "vn";
    CountryISO["WallisAndFutuna"] = "wf";
    CountryISO["WesternSahara"] = "eh";
    CountryISO["Yemen"] = "ye";
    CountryISO["Zambia"] = "zm";
    CountryISO["Zimbabwe"] = "zw";
    CountryISO["\u00C5landIslands"] = "ax";
})(CountryISO || (CountryISO = {}));

let CountryCode = class CountryCode {
    constructor() {
        this.allCountries = [
            [
                'Afghanistan (‫افغانستان‬‎)',
                CountryISO.Afghanistan,
                '93'
            ],
            [
                'Albania (Shqipëri)',
                CountryISO.Albania,
                '355'
            ],
            [
                'Algeria (‫الجزائر‬‎)',
                CountryISO.Algeria,
                '213'
            ],
            [
                'American Samoa',
                'as',
                '1',
                1,
                [
                    '684',
                ]
            ],
            [
                'Andorra',
                CountryISO.Andorra,
                '376'
            ],
            [
                'Angola',
                CountryISO.Angola,
                '244'
            ],
            [
                'Anguilla',
                'ai',
                '1',
                1,
                [
                    '264',
                ]
            ],
            [
                'Antigua and Barbuda',
                'ag',
                '1',
                1,
                [
                    '268',
                ]
            ],
            [
                'Argentina',
                CountryISO.Argentina,
                '54'
            ],
            [
                'Armenia (Հայաստան)',
                CountryISO.Armenia,
                '374'
            ],
            [
                'Aruba',
                CountryISO.Aruba,
                '297'
            ],
            [
                'Australia',
                CountryISO.Australia,
                '61',
                0
            ],
            [
                'Austria (Österreich)',
                CountryISO.Austria,
                '43'
            ],
            [
                'Azerbaijan (Azərbaycan)',
                CountryISO.Azerbaijan,
                '994'
            ],
            [
                'Bahamas',
                'bs',
                '1',
                1,
                [
                    '242',
                ]
            ],
            [
                'Bahrain (‫البحرين‬‎)',
                CountryISO.Bahrain,
                '973'
            ],
            [
                'Bangladesh (বাংলাদেশ)',
                CountryISO.Bangladesh,
                '880'
            ],
            [
                'Barbados',
                'bb',
                '1',
                1,
                [
                    '246',
                ]
            ],
            [
                'Belarus (Беларусь)',
                CountryISO.Belarus,
                '375'
            ],
            [
                'Belgium (België)',
                CountryISO.Belgium,
                '32'
            ],
            [
                'Belize',
                CountryISO.Belize,
                '501'
            ],
            [
                'Benin (Bénin)',
                CountryISO.Benin,
                '229'
            ],
            [
                'Bermuda',
                'bm',
                '1',
                1,
                [
                    '441',
                ]
            ],
            [
                'Bhutan (འབྲུག)',
                CountryISO.Bhutan,
                '975'
            ],
            [
                'Bolivia',
                CountryISO.Bolivia,
                '591'
            ],
            [
                'Bosnia and Herzegovina (Босна и Херцеговина)',
                CountryISO.BosniaAndHerzegovina,
                '387'
            ],
            [
                'Botswana',
                CountryISO.Botswana,
                '267'
            ],
            [
                'Brazil (Brasil)',
                CountryISO.Brazil,
                '55'
            ],
            [
                'British Indian Ocean Territory',
                CountryISO.BritishIndianOceanTerritory,
                '246'
            ],
            [
                'British Virgin Islands',
                'vg',
                '1',
                1,
                [
                    '284',
                ]
            ],
            [
                'Brunei',
                CountryISO.Brunei,
                '673'
            ],
            [
                'Bulgaria (България)',
                CountryISO.Bulgaria,
                '359'
            ],
            [
                'Burkina Faso',
                CountryISO.BurkinaFaso,
                '226'
            ],
            [
                'Burundi (Uburundi)',
                CountryISO.Burundi,
                '257'
            ],
            [
                'Cambodia (កម្ពុជា)',
                CountryISO.Cambodia,
                '855'
            ],
            [
                'Cameroon (Cameroun)',
                CountryISO.Cameroon,
                '237'
            ],
            [
                'Canada',
                CountryISO.Canada,
                '1',
                1,
                [
                    '204', '226', '236', '249', '250', '289', '306', '343', '365', '387', '403', '416',
                    '418', '431', '437', '438', '450', '506', '514', '519', '548', '579', '581', '587',
                    '604', '613', '639', '647', '672', '705', '709', '742', '778', '780', '782', '807',
                    '819', '825', '867', '873', '902', '905'
                ]
            ],
            [
                'Cape Verde (Kabu Verdi)',
                CountryISO.CapeVerde,
                '238'
            ],
            [
                'Caribbean Netherlands',
                CountryISO.CaribbeanNetherlands,
                '599',
                1
            ],
            [
                'Cayman Islands',
                'ky',
                '1',
                1,
                [
                    '345',
                ]
            ],
            [
                'Central African Republic (République centrafricaine)',
                CountryISO.CentralAfricanRepublic,
                '236'
            ],
            [
                'Chad (Tchad)',
                CountryISO.Chad,
                '235'
            ],
            [
                'Chile',
                CountryISO.Chile,
                '56'
            ],
            [
                'China (中国)',
                CountryISO.China,
                '86'
            ],
            [
                'Christmas Island',
                CountryISO.ChristmasIsland,
                '61',
                2
            ],
            [
                'Cocos (Keeling) Islands',
                CountryISO.Cocos,
                '61',
                1
            ],
            [
                'Colombia',
                CountryISO.Colombia,
                '57'
            ],
            [
                'Comoros (‫جزر القمر‬‎)',
                CountryISO.Comoros,
                '269'
            ],
            [
                'Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)',
                CountryISO.CongoDRCJamhuriYaKidemokrasiaYaKongo,
                '243'
            ],
            [
                'Congo (Republic) (Congo-Brazzaville)',
                CountryISO.CongoRepublicCongoBrazzaville,
                '242'
            ],
            [
                'Cook Islands',
                CountryISO.CookIslands,
                '682'
            ],
            [
                'Costa Rica',
                CountryISO.CostaRica,
                '506'
            ],
            [
                'Côte d’Ivoire',
                CountryISO.CôteDIvoire,
                '225'
            ],
            [
                'Croatia (Hrvatska)',
                CountryISO.Croatia,
                '385'
            ],
            [
                'Cuba',
                CountryISO.Cuba,
                '53'
            ],
            [
                'Curaçao',
                CountryISO.Curaçao,
                '599',
                0
            ],
            [
                'Cyprus (Κύπρος)',
                CountryISO.Cyprus,
                '357'
            ],
            [
                'Czech Republic (Česká republika)',
                CountryISO.CzechRepublic,
                '420'
            ],
            [
                'Denmark (Danmark)',
                CountryISO.Denmark,
                '45'
            ],
            [
                'Djibouti',
                CountryISO.Djibouti,
                '253'
            ],
            [
                'Dominica',
                CountryISO.Dominica,
                '1767'
            ],
            [
                'Dominican Republic (República Dominicana)',
                CountryISO.DominicanRepublic,
                '1',
                2,
                ['809', '829', '849']
            ],
            [
                'Ecuador',
                CountryISO.Ecuador,
                '593'
            ],
            [
                'Egypt (‫مصر‬‎)',
                CountryISO.Egypt,
                '20'
            ],
            [
                'El Salvador',
                CountryISO.ElSalvador,
                '503'
            ],
            [
                'Equatorial Guinea (Guinea Ecuatorial)',
                CountryISO.EquatorialGuinea,
                '240'
            ],
            [
                'Eritrea',
                CountryISO.Eritrea,
                '291'
            ],
            [
                'Estonia (Eesti)',
                CountryISO.Estonia,
                '372'
            ],
            [
                'Ethiopia',
                CountryISO.Ethiopia,
                '251'
            ],
            [
                'Falkland Islands (Islas Malvinas)',
                CountryISO.FalklandIslands,
                '500'
            ],
            [
                'Faroe Islands (Føroyar)',
                CountryISO.FaroeIslands,
                '298'
            ],
            [
                'Fiji',
                CountryISO.Fiji,
                '679'
            ],
            [
                'Finland (Suomi)',
                CountryISO.Finland,
                '358',
                0
            ],
            [
                'France',
                CountryISO.France,
                '33'
            ],
            [
                'French Guiana (Guyane française)',
                CountryISO.FrenchGuiana,
                '594'
            ],
            [
                'French Polynesia (Polynésie française)',
                CountryISO.FrenchPolynesia,
                '689'
            ],
            [
                'Gabon',
                CountryISO.Gabon,
                '241'
            ],
            [
                'Gambia',
                CountryISO.Gambia,
                '220'
            ],
            [
                'Georgia (საქართველო)',
                CountryISO.Georgia,
                '995'
            ],
            [
                'Germany (Deutschland)',
                CountryISO.Germany,
                '49'
            ],
            [
                'Ghana (Gaana)',
                CountryISO.Ghana,
                '233'
            ],
            [
                'Gibraltar',
                CountryISO.Gibraltar,
                '350'
            ],
            [
                'Greece (Ελλάδα)',
                CountryISO.Greece,
                '30'
            ],
            [
                'Greenland (Kalaallit Nunaat)',
                CountryISO.Greenland,
                '299'
            ],
            [
                'Grenada',
                CountryISO.Grenada,
                '1473'
            ],
            [
                'Guadeloupe',
                CountryISO.Guadeloupe,
                '590',
                0
            ],
            [
                'Guam',
                'gu',
                '1',
                1,
                [
                    '671',
                ]
            ],
            [
                'Guatemala',
                CountryISO.Guatemala,
                '502'
            ],
            [
                'Guernsey',
                CountryISO.Guernsey,
                '44',
                1,
                [1481]
            ],
            [
                'Guinea (Guinée)',
                CountryISO.Guinea,
                '224'
            ],
            [
                'Guinea-Bissau (Guiné Bissau)',
                CountryISO.GuineaBissau,
                '245'
            ],
            [
                'Guyana',
                CountryISO.Guyana,
                '592'
            ],
            [
                'Haiti',
                CountryISO.Haiti,
                '509'
            ],
            [
                'Honduras',
                CountryISO.Honduras,
                '504'
            ],
            [
                'Hong Kong (香港)',
                CountryISO.HongKong,
                '852'
            ],
            [
                'Hungary (Magyarország)',
                CountryISO.Hungary,
                '36'
            ],
            [
                'Iceland (Ísland)',
                CountryISO.Iceland,
                '354'
            ],
            [
                'India (भारत)',
                CountryISO.India,
                '91'
            ],
            [
                'Indonesia',
                CountryISO.Indonesia,
                '62'
            ],
            [
                'Iran (‫ایران‬‎)',
                CountryISO.Iran,
                '98'
            ],
            [
                'Iraq (‫العراق‬‎)',
                CountryISO.Iraq,
                '964'
            ],
            [
                'Ireland',
                CountryISO.Ireland,
                '353'
            ],
            [
                'Isle of Man',
                CountryISO.IsleOfMan,
                '44',
                2,
                [1624]
            ],
            [
                'Israel (‫ישראל‬‎)',
                CountryISO.Israel,
                '972'
            ],
            [
                'Italy (Italia)',
                CountryISO.Italy,
                '39',
                0
            ],
            [
                'Jamaica',
                'jm',
                '1',
                1,
                [
                    '876',
                ]
            ],
            [
                'Japan (日本)',
                CountryISO.Japan,
                '81'
            ],
            [
                'Jersey',
                CountryISO.Jersey,
                '44',
                3,
                [1534]
            ],
            [
                'Jordan (‫الأردن‬‎)',
                CountryISO.Jordan,
                '962'
            ],
            [
                'Kazakhstan (Казахстан)',
                CountryISO.Kazakhstan,
                '7',
                1
            ],
            [
                'Kenya',
                CountryISO.Kenya,
                '254'
            ],
            [
                'Kiribati',
                CountryISO.Kiribati,
                '686'
            ],
            [
                'Kosovo',
                CountryISO.Kosovo,
                '383'
            ],
            [
                'Kuwait (‫الكويت‬‎)',
                CountryISO.Kuwait,
                '965'
            ],
            [
                'Kyrgyzstan (Кыргызстан)',
                CountryISO.Kyrgyzstan,
                '996'
            ],
            [
                'Laos (ລາວ)',
                CountryISO.Laos,
                '856'
            ],
            [
                'Latvia (Latvija)',
                CountryISO.Latvia,
                '371'
            ],
            [
                'Lebanon (‫لبنان‬‎)',
                CountryISO.Lebanon,
                '961'
            ],
            [
                'Lesotho',
                CountryISO.Lesotho,
                '266'
            ],
            [
                'Liberia',
                CountryISO.Liberia,
                '231'
            ],
            [
                'Libya (‫ليبيا‬‎)',
                CountryISO.Libya,
                '218'
            ],
            [
                'Liechtenstein',
                CountryISO.Liechtenstein,
                '423'
            ],
            [
                'Lithuania (Lietuva)',
                CountryISO.Lithuania,
                '370'
            ],
            [
                'Luxembourg',
                CountryISO.Luxembourg,
                '352'
            ],
            [
                'Macau (澳門)',
                CountryISO.Macau,
                '853'
            ],
            [
                'Macedonia (FYROM) (Македонија)',
                CountryISO.Macedonia,
                '389'
            ],
            [
                'Madagascar (Madagasikara)',
                CountryISO.Madagascar,
                '261'
            ],
            [
                'Malawi',
                CountryISO.Malawi,
                '265'
            ],
            [
                'Malaysia',
                CountryISO.Malaysia,
                '60'
            ],
            [
                'Maldives',
                CountryISO.Maldives,
                '960'
            ],
            [
                'Mali',
                CountryISO.Mali,
                '223'
            ],
            [
                'Malta',
                CountryISO.Malta,
                '356'
            ],
            [
                'Marshall Islands',
                CountryISO.MarshallIslands,
                '692'
            ],
            [
                'Martinique',
                CountryISO.Martinique,
                '596'
            ],
            [
                'Mauritania (‫موريتانيا‬‎)',
                CountryISO.Mauritania,
                '222'
            ],
            [
                'Mauritius (Moris)',
                CountryISO.Mauritius,
                '230'
            ],
            [
                'Mayotte',
                CountryISO.Mayotte,
                '262',
                1
            ],
            [
                'Mexico (México)',
                CountryISO.Mexico,
                '52'
            ],
            [
                'Micronesia',
                CountryISO.Micronesia,
                '691'
            ],
            [
                'Moldova (Republica Moldova)',
                CountryISO.Moldova,
                '373'
            ],
            [
                'Monaco',
                CountryISO.Monaco,
                '377'
            ],
            [
                'Mongolia (Монгол)',
                CountryISO.Mongolia,
                '976'
            ],
            [
                'Montenegro (Crna Gora)',
                CountryISO.Montenegro,
                '382'
            ],
            [
                'Montserrat',
                'ms',
                '1',
                1,
                [
                    '664',
                ]
            ],
            [
                'Morocco (‫المغرب‬‎)',
                CountryISO.Morocco,
                '212',
                0
            ],
            [
                'Mozambique (Moçambique)',
                CountryISO.Mozambique,
                '258'
            ],
            [
                'Myanmar (Burma) (မြန်မာ)',
                CountryISO.Myanmar,
                '95'
            ],
            [
                'Namibia (Namibië)',
                CountryISO.Namibia,
                '264'
            ],
            [
                'Nauru',
                CountryISO.Nauru,
                '674'
            ],
            [
                'Nepal (नेपाल)',
                CountryISO.Nepal,
                '977'
            ],
            [
                'Netherlands (Nederland)',
                CountryISO.Netherlands,
                '31'
            ],
            [
                'New Caledonia (Nouvelle-Calédonie)',
                CountryISO.NewCaledonia,
                '687'
            ],
            [
                'New Zealand',
                CountryISO.NewZealand,
                '64'
            ],
            [
                'Nicaragua',
                CountryISO.Nicaragua,
                '505'
            ],
            [
                'Niger (Nijar)',
                CountryISO.Niger,
                '227'
            ],
            [
                'Nigeria',
                CountryISO.Nigeria,
                '234'
            ],
            [
                'Niue',
                CountryISO.Niue,
                '683'
            ],
            [
                'Norfolk Island',
                CountryISO.NorfolkIsland,
                '672'
            ],
            [
                'North Korea (조선 민주주의 인민 공화국)',
                CountryISO.NorthKorea,
                '850'
            ],
            [
                'Northern Mariana Islands',
                CountryISO.NorthernMarianaIslands,
                '1670'
            ],
            [
                'Norway (Norge)',
                CountryISO.Norway,
                '47',
                0
            ],
            [
                'Oman (‫عُمان‬‎)',
                CountryISO.Oman,
                '968'
            ],
            [
                'Pakistan (‫پاکستان‬‎)',
                CountryISO.Pakistan,
                '92'
            ],
            [
                'Palau',
                CountryISO.Palau,
                '680'
            ],
            [
                'Palestine (‫فلسطين‬‎)',
                CountryISO.Palestine,
                '970'
            ],
            [
                'Panama (Panamá)',
                CountryISO.Panama,
                '507'
            ],
            [
                'Papua New Guinea',
                CountryISO.PapuaNewGuinea,
                '675'
            ],
            [
                'Paraguay',
                CountryISO.Paraguay,
                '595'
            ],
            [
                'Peru (Perú)',
                CountryISO.Peru,
                '51'
            ],
            [
                'Philippines',
                CountryISO.Philippines,
                '63'
            ],
            [
                'Poland (Polska)',
                CountryISO.Poland,
                '48'
            ],
            [
                'Portugal',
                CountryISO.Portugal,
                '351'
            ],
            [
                'Puerto Rico',
                CountryISO.PuertoRico,
                '1',
                3,
                ['787', '939']
            ],
            [
                'Qatar (‫قطر‬‎)',
                CountryISO.Qatar,
                '974'
            ],
            [
                'Réunion (La Réunion)',
                CountryISO.Réunion,
                '262',
                0
            ],
            [
                'Romania (România)',
                CountryISO.Romania,
                '40'
            ],
            [
                'Russia (Россия)',
                CountryISO.Russia,
                '7',
                0
            ],
            [
                'Rwanda',
                CountryISO.Rwanda,
                '250'
            ],
            [
                'Saint Barthélemy (Saint-Barthélemy)',
                CountryISO.SaintBarthélemy,
                '590',
                1
            ],
            [
                'Saint Helena',
                CountryISO.SaintHelena,
                '290'
            ],
            [
                'Saint Kitts and Nevis',
                CountryISO.SaintKittsAndNevis,
                '1869'
            ],
            [
                'Saint Lucia',
                'lc',
                '1',
                1,
                [
                    '758',
                ]
            ],
            [
                'Saint Martin (Saint-Martin (partie française))',
                CountryISO.SaintMartin,
                '590',
                2
            ],
            [
                'Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)',
                CountryISO.SaintPierreAndMiquelon,
                '508'
            ],
            [
                'Saint Vincent and the Grenadines',
                'vc',
                '1',
                1,
                [
                    '784',
                ]
            ],
            [
                'Samoa',
                CountryISO.Samoa,
                '685'
            ],
            [
                'San Marino',
                CountryISO.SanMarino,
                '378'
            ],
            [
                'São Tomé and Príncipe (São Tomé e Príncipe)',
                CountryISO.SãoToméAndPríncipe,
                '239'
            ],
            [
                'Saudi Arabia (‫المملكة العربية السعودية‬‎)',
                CountryISO.SaudiArabia,
                '966'
            ],
            [
                'Senegal (Sénégal)',
                CountryISO.Senegal,
                '221'
            ],
            [
                'Serbia (Србија)',
                CountryISO.Serbia,
                '381'
            ],
            [
                'Seychelles',
                CountryISO.Seychelles,
                '248'
            ],
            [
                'Sierra Leone',
                CountryISO.SierraLeone,
                '232'
            ],
            [
                'Singapore',
                CountryISO.Singapore,
                '65'
            ],
            [
                'Sint Maarten',
                'sx',
                '1',
                1,
                [
                    '721',
                ]
            ],
            [
                'Slovakia (Slovensko)',
                CountryISO.Slovakia,
                '421'
            ],
            [
                'Slovenia (Slovenija)',
                CountryISO.Slovenia,
                '386'
            ],
            [
                'Solomon Islands',
                CountryISO.SolomonIslands,
                '677'
            ],
            [
                'Somalia (Soomaaliya)',
                CountryISO.Somalia,
                '252'
            ],
            [
                'South Africa',
                CountryISO.SouthAfrica,
                '27'
            ],
            [
                'South Korea (대한민국)',
                CountryISO.SouthKorea,
                '82'
            ],
            [
                'South Sudan (‫جنوب السودان‬‎)',
                CountryISO.SouthSudan,
                '211'
            ],
            [
                'Spain (España)',
                CountryISO.Spain,
                '34'
            ],
            [
                'Sri Lanka (ශ්‍රී ලංකාව)',
                CountryISO.SriLanka,
                '94'
            ],
            [
                'Sudan (‫السودان‬‎)',
                CountryISO.Sudan,
                '249'
            ],
            [
                'Suriname',
                CountryISO.Suriname,
                '597'
            ],
            [
                'Svalbard and Jan Mayen',
                CountryISO.SvalbardAndJanMayen,
                '47',
                1
            ],
            [
                'Swaziland',
                CountryISO.Swaziland,
                '268'
            ],
            [
                'Sweden (Sverige)',
                CountryISO.Sweden,
                '46'
            ],
            [
                'Switzerland (Schweiz)',
                CountryISO.Switzerland,
                '41'
            ],
            [
                'Syria (‫سوريا‬‎)',
                CountryISO.Syria,
                '963'
            ],
            [
                'Taiwan (台灣)',
                CountryISO.Taiwan,
                '886'
            ],
            [
                'Tajikistan',
                CountryISO.Tajikistan,
                '992'
            ],
            [
                'Tanzania',
                CountryISO.Tanzania,
                '255'
            ],
            [
                'Thailand (ไทย)',
                CountryISO.Thailand,
                '66'
            ],
            [
                'Timor-Leste',
                CountryISO.TimorLeste,
                '670'
            ],
            [
                'Togo',
                CountryISO.Togo,
                '228'
            ],
            [
                'Tokelau',
                CountryISO.Tokelau,
                '690'
            ],
            [
                'Tonga',
                CountryISO.Tonga,
                '676'
            ],
            [
                'Trinidad and Tobago',
                'tt',
                '1',
                1,
                [
                    '868',
                ]
            ],
            [
                'Tunisia (‫تونس‬‎)',
                CountryISO.Tunisia,
                '216'
            ],
            [
                'Turkey (Türkiye)',
                CountryISO.Turkey,
                '90'
            ],
            [
                'Turkmenistan',
                CountryISO.Turkmenistan,
                '993'
            ],
            [
                'Turks and Caicos Islands',
                CountryISO.TurksAndCaicosIslands,
                '1649'
            ],
            [
                'Tuvalu',
                CountryISO.Tuvalu,
                '688'
            ],
            [
                'U.S. Virgin Islands',
                'vi',
                '1',
                1,
                [
                    '340',
                ]
            ],
            [
                'Uganda',
                CountryISO.Uganda,
                '256'
            ],
            [
                'Ukraine (Україна)',
                CountryISO.Ukraine,
                '380'
            ],
            [
                'United Arab Emirates (‫الإمارات العربية المتحدة‬‎)',
                CountryISO.UnitedArabEmirates,
                '971'
            ],
            [
                'United Kingdom',
                CountryISO.UnitedKingdom,
                '44',
                0
            ],
            [
                'United States',
                CountryISO.UnitedStates,
                '1',
                0
            ],
            [
                'Uruguay',
                CountryISO.Uruguay,
                '598'
            ],
            [
                'Uzbekistan (Oʻzbekiston)',
                CountryISO.Uzbekistan,
                '998'
            ],
            [
                'Vanuatu',
                CountryISO.Vanuatu,
                '678'
            ],
            [
                'Vatican City (Città del Vaticano)',
                CountryISO.VaticanCity,
                '39',
                1
            ],
            [
                'Venezuela',
                CountryISO.Venezuela,
                '58'
            ],
            [
                'Vietnam (Việt Nam)',
                CountryISO.Vietnam,
                '84'
            ],
            [
                'Wallis and Futuna',
                CountryISO.WallisAndFutuna,
                '681'
            ],
            [
                'Western Sahara (‫الصحراء الغربية‬‎)',
                CountryISO.WesternSahara,
                '212',
                1
            ],
            [
                'Yemen (‫اليمن‬‎)',
                CountryISO.Yemen,
                '967'
            ],
            [
                'Zambia',
                CountryISO.Zambia,
                '260'
            ],
            [
                'Zimbabwe',
                CountryISO.Zimbabwe,
                '263'
            ],
            [
                'Åland Islands',
                CountryISO.ÅlandIslands,
                '358',
                1
            ]
        ];
    }
};
CountryCode.ɵfac = function CountryCode_Factory(t) { return new (t || CountryCode)(); };
CountryCode.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CountryCode, factory: CountryCode.ɵfac });

var SearchCountryField;
(function (SearchCountryField) {
    SearchCountryField["DialCode"] = "dialCode";
    SearchCountryField["Iso2"] = "iso2";
    SearchCountryField["Name"] = "name";
    SearchCountryField["All"] = "all";
})(SearchCountryField || (SearchCountryField = {}));

var TooltipLabel;
(function (TooltipLabel) {
    TooltipLabel["Name"] = "name";
    TooltipLabel["Iso2"] = "iso2";
})(TooltipLabel || (TooltipLabel = {}));

/*
We use "control: any" instead of "control: FormControl" to silence:
"Property 'nativeElement' does not exist on type 'FormControl'".
This happens because I've expanded control with nativeElement via
'NativeElementInjectorDirective' to get an access to the element.
More about this approach and reasons for this:
https://github.com/angular/angular/issues/18025
https://stackoverflow.com/a/54075119/1617590
*/
const phoneNumberValidator = (control) => {
    if (!control.value) {
        return;
    }
    // Find <input> inside injected nativeElement and get its "id".
    const el = control.nativeElement;
    const inputBox = el
        ? el.querySelector('input[type="tel"]')
        : undefined;
    if (inputBox) {
        const id = inputBox.id;
        const isCheckValidation = inputBox.getAttribute('validation');
        if (isCheckValidation === 'true') {
            const isRequired = control.errors && control.errors.required === true;
            const error = { validatePhoneNumber: { valid: false } };
            inputBox.setCustomValidity('Invalid field.');
            let number;
            try {
                number = PhoneNumberUtil.getInstance().parse(control.value.number, control.value.countryCode);
            }
            catch (e) {
                if (isRequired === true) {
                    return error;
                }
                else {
                    inputBox.setCustomValidity('');
                }
            }
            if (control.value) {
                if (!number) {
                    return error;
                }
                else {
                    if (!PhoneNumberUtil.getInstance().isValidNumberForRegion(number, control.value.countryCode)) {
                        return error;
                    }
                    else {
                        inputBox.setCustomValidity('');
                    }
                }
            }
        }
        else if (isCheckValidation === 'false') {
            inputBox.setCustomValidity('');
            control.clearValidators();
        }
    }
    return;
};

var NgxIntlTelInputComponent_1;
const ɵ0 = phoneNumberValidator;
let NgxIntlTelInputComponent = NgxIntlTelInputComponent_1 = class NgxIntlTelInputComponent {
    constructor(countryCodeData) {
        this.countryCodeData = countryCodeData;
        this.value = '';
        this.preferredCountries = [];
        this.enablePlaceholder = true;
        this.cssClass = 'form-control';
        this.onlyCountries = [];
        this.enableAutoCountrySelect = true;
        this.searchCountryFlag = false;
        this.searchCountryField = [SearchCountryField.All];
        this.searchCountryPlaceholder = 'Search Country';
        this.maxLength = '';
        this.selectFirstCountry = true;
        this.phoneValidation = true;
        this.inputId = 'phone';
        this.separateDialCode = false;
        this.countryChange = new EventEmitter();
        this.selectedCountry = {
            areaCodes: undefined,
            dialCode: '',
            htmlId: '',
            flagClass: '',
            iso2: '',
            name: '',
            placeHolder: '',
            priority: 0,
        };
        this.phoneNumber = '';
        this.allCountries = [];
        this.preferredCountriesInDropDown = [];
        // Has to be 'any' to prevent a need to install @types/google-libphonenumber by the package user...
        this.phoneUtil = PhoneNumberUtil.getInstance();
        this.disabled = false;
        this.errors = ['Phone number is required.'];
        this.countrySearchText = '';
        this.onTouched = () => { };
        this.propagateChange = (_) => { };
    }
    ngOnInit() {
        this.init();
    }
    ngOnChanges(changes) {
        const selectedISO = changes['selectedCountryISO'];
        if (this.allCountries &&
            selectedISO &&
            selectedISO.currentValue !== selectedISO.previousValue) {
            this.getSelectedCountry();
        }
        if (changes.preferredCountries) {
            this.getPreferredCountries();
        }
        this.checkSeparateDialCodeStyle();
    }
    /*
        This is a wrapper method to avoid calling this.ngOnInit() in writeValue().
        Ref: http://codelyzer.com/rules/no-life-cycle-call/
    */
    init() {
        this.fetchCountryData();
        if (this.preferredCountries.length) {
            this.getPreferredCountries();
        }
        if (this.onlyCountries.length) {
            this.allCountries = this.allCountries.filter((c) => this.onlyCountries.includes(c.iso2));
        }
        if (this.selectFirstCountry) {
            if (this.preferredCountriesInDropDown.length) {
                this.setSelectedCountry(this.preferredCountriesInDropDown[0]);
            }
            else {
                this.setSelectedCountry(this.allCountries[0]);
            }
        }
        this.getSelectedCountry();
        this.checkSeparateDialCodeStyle();
    }
    getPreferredCountries() {
        if (this.preferredCountries.length) {
            this.preferredCountriesInDropDown = [];
            this.preferredCountries.forEach((iso2) => {
                const preferredCountry = this.allCountries.filter((c) => {
                    return c.iso2 === iso2;
                });
                this.preferredCountriesInDropDown.push(preferredCountry[0]);
            });
        }
    }
    getSelectedCountry() {
        if (this.selectedCountryISO) {
            this.selectedCountry = this.allCountries.find((c) => {
                return c.iso2.toLowerCase() === this.selectedCountryISO.toLowerCase();
            });
            if (this.selectedCountry) {
                if (this.phoneNumber) {
                    this.onPhoneNumberChange();
                }
                else {
                    // Reason: avoid https://stackoverflow.com/a/54358133/1617590
                    // tslint:disable-next-line: no-null-keyword
                    this.propagateChange(null);
                }
            }
        }
    }
    setSelectedCountry(country) {
        this.selectedCountry = country;
        this.countryChange.emit(country);
    }
    /**
     * Search country based on country name, iso2, dialCode or all of them.
     */
    searchCountry() {
        if (!this.countrySearchText) {
            this.countryList.nativeElement
                .querySelector('.iti__country-list li')
                .scrollIntoView({
                behavior: 'smooth',
                block: 'nearest',
                inline: 'nearest',
            });
            return;
        }
        const countrySearchTextLower = this.countrySearchText.toLowerCase();
        const country = this.allCountries.filter((c) => {
            if (this.searchCountryField.indexOf(SearchCountryField.All) > -1) {
                // Search in all fields
                if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {
                    return c;
                }
                if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {
                    return c;
                }
                if (c.dialCode.startsWith(this.countrySearchText)) {
                    return c;
                }
            }
            else {
                // Or search by specific SearchCountryField(s)
                if (this.searchCountryField.indexOf(SearchCountryField.Iso2) > -1) {
                    if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {
                        return c;
                    }
                }
                if (this.searchCountryField.indexOf(SearchCountryField.Name) > -1) {
                    if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {
                        return c;
                    }
                }
                if (this.searchCountryField.indexOf(SearchCountryField.DialCode) > -1) {
                    if (c.dialCode.startsWith(this.countrySearchText)) {
                        return c;
                    }
                }
            }
        });
        if (country.length > 0) {
            const el = this.countryList.nativeElement.querySelector('#' + country[0].htmlId);
            if (el) {
                el.scrollIntoView({
                    behavior: 'smooth',
                    block: 'nearest',
                    inline: 'nearest',
                });
            }
        }
        this.checkSeparateDialCodeStyle();
    }
    onPhoneNumberChange() {
        let countryCode;
        // Handle the case where the user sets the value programatically based on a persisted ChangeData obj.
        if (this.phoneNumber && typeof this.phoneNumber === 'object') {
            const numberObj = this.phoneNumber;
            this.phoneNumber = numberObj.number;
            countryCode = numberObj.countryCode;
        }
        this.value = this.phoneNumber;
        countryCode = countryCode || this.selectedCountry.iso2.toUpperCase();
        let number;
        try {
            number = this.phoneUtil.parse(this.phoneNumber, countryCode);
        }
        catch (e) { }
        // auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)
        if (this.enableAutoCountrySelect) {
            countryCode =
                number && number.getCountryCode()
                    ? this.getCountryIsoCode(number.getCountryCode(), number)
                    : this.selectedCountry.iso2;
            if (countryCode && countryCode !== this.selectedCountry.iso2) {
                const newCountry = this.allCountries.sort((a, b) => {
                    return a.priority - b.priority;
                }).find((c) => c.iso2 === countryCode);
                if (newCountry) {
                    this.selectedCountry = newCountry;
                }
            }
        }
        countryCode = countryCode ? countryCode : this.selectedCountry.iso2;
        this.checkSeparateDialCodeStyle();
        if (!this.value) {
            // Reason: avoid https://stackoverflow.com/a/54358133/1617590
            // tslint:disable-next-line: no-null-keyword
            this.propagateChange(null);
        }
        else {
            const intlNo = number
                ? this.phoneUtil.format(number, PhoneNumberFormat.INTERNATIONAL)
                : '';
            // parse phoneNumber if separate dial code is needed
            if (this.separateDialCode && intlNo) {
                this.value = this.removeDialCode(intlNo);
            }
            this.propagateChange({
                number: this.value,
                internationalNumber: intlNo,
                nationalNumber: number
                    ? this.phoneUtil.format(number, PhoneNumberFormat.NATIONAL)
                    : '',
                e164Number: number
                    ? this.phoneUtil.format(number, PhoneNumberFormat.E164)
                    : '',
                countryCode: countryCode.toUpperCase(),
                dialCode: '+' + this.selectedCountry.dialCode,
            });
        }
    }
    onCountrySelect(country, el) {
        this.setSelectedCountry(country);
        this.checkSeparateDialCodeStyle();
        if (this.phoneNumber && this.phoneNumber.length > 0) {
            this.value = this.phoneNumber;
            let number;
            try {
                number = this.phoneUtil.parse(this.phoneNumber, this.selectedCountry.iso2.toUpperCase());
            }
            catch (e) { }
            const intlNo = number
                ? this.phoneUtil.format(number, PhoneNumberFormat.INTERNATIONAL)
                : '';
            // parse phoneNumber if separate dial code is needed
            if (this.separateDialCode && intlNo) {
                this.value = this.removeDialCode(intlNo);
            }
            this.propagateChange({
                number: this.value,
                internationalNumber: intlNo,
                nationalNumber: number
                    ? this.phoneUtil.format(number, PhoneNumberFormat.NATIONAL)
                    : '',
                e164Number: number
                    ? this.phoneUtil.format(number, PhoneNumberFormat.E164)
                    : '',
                countryCode: this.selectedCountry.iso2.toUpperCase(),
                dialCode: '+' + this.selectedCountry.dialCode,
            });
        }
        else {
            // Reason: avoid https://stackoverflow.com/a/54358133/1617590
            // tslint:disable-next-line: no-null-keyword
            this.propagateChange(null);
        }
        el.focus();
    }
    onInputKeyPress(event) {
        const allowedChars = /[0-9\+\-\ ]/;
        const allowedCtrlChars = /[axcv]/; // Allows copy-pasting
        const allowedOtherKeys = [
            'ArrowLeft',
            'ArrowUp',
            'ArrowRight',
            'ArrowDown',
            'Home',
            'End',
            'Insert',
            'Delete',
            'Backspace',
        ];
        if (!allowedChars.test(event.key) &&
            !(event.ctrlKey && allowedCtrlChars.test(event.key)) &&
            !allowedOtherKeys.includes(event.key)) {
            event.preventDefault();
        }
    }
    fetchCountryData() {
        /* Clearing the list to avoid duplicates (https://github.com/webcat12345/ngx-intl-tel-input/issues/248) */
        this.allCountries = [];
        this.countryCodeData.allCountries.forEach((c) => {
            const country = {
                name: c[0].toString(),
                iso2: c[1].toString(),
                dialCode: c[2].toString(),
                priority: +c[3] || 0,
                areaCodes: c[4] || undefined,
                htmlId: `iti-0__item-${c[1].toString()}`,
                flagClass: `iti__${c[1].toString().toLocaleLowerCase()}`,
                placeHolder: '',
            };
            if (this.enablePlaceholder) {
                country.placeHolder = this.getPhoneNumberPlaceHolder(country.iso2.toUpperCase());
            }
            this.allCountries.push(country);
        });
    }
    getPhoneNumberPlaceHolder(countryCode) {
        try {
            return this.phoneUtil.format(this.phoneUtil.getExampleNumber(countryCode), PhoneNumberFormat.INTERNATIONAL);
        }
        catch (e) {
            return e;
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    writeValue(obj) {
        if (obj === undefined) {
            this.init();
        }
        this.phoneNumber = obj;
        setTimeout(() => {
            this.onPhoneNumberChange();
        }, 1);
    }
    getCountryIsoCode(countryCode, number) {
        // Will use this to match area code from the first numbers
        const rawNumber = number['values_']['2'].toString();
        // List of all countries with countryCode (can be more than one. e.x. US, CA, DO, PR all have +1 countryCode)
        const countries = this.allCountries.filter((c) => c.dialCode === countryCode.toString());
        // Main country is the country, which has no areaCodes specified in country-code.ts file.
        const mainCountry = countries.find((c) => c.areaCodes === undefined);
        // Secondary countries are all countries, which have areaCodes specified in country-code.ts file.
        const secondaryCountries = countries.filter((c) => c.areaCodes !== undefined);
        let matchedCountry = mainCountry ? mainCountry.iso2 : undefined;
        /*
            Iterate over each secondary country and check if nationalNumber starts with any of areaCodes available.
            If no matches found, fallback to the main country.
        */
        secondaryCountries.forEach((country) => {
            country.areaCodes.forEach((areaCode) => {
                if (rawNumber.startsWith(areaCode)) {
                    matchedCountry = country.iso2;
                }
            });
        });
        return matchedCountry;
    }
    separateDialCodePlaceHolder(placeholder) {
        return this.removeDialCode(placeholder);
    }
    removeDialCode(phoneNumber) {
        if (this.separateDialCode && phoneNumber) {
            phoneNumber = phoneNumber.substr(phoneNumber.indexOf(' ') + 1);
        }
        return phoneNumber;
    }
    // adjust input alignment
    checkSeparateDialCodeStyle() {
        if (this.separateDialCode && this.selectedCountry) {
            const cntryCd = this.selectedCountry.dialCode;
            this.separateDialCodeClass =
                'separate-dial-code iti-sdc-' + (cntryCd.length + 1);
        }
        else {
            this.separateDialCodeClass = '';
        }
    }
};
NgxIntlTelInputComponent.ɵfac = function NgxIntlTelInputComponent_Factory(t) { return new (t || NgxIntlTelInputComponent)(ɵngcc0.ɵɵdirectiveInject(CountryCode)); };
NgxIntlTelInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxIntlTelInputComponent, selectors: [["ngx-intl-tel-input"]], viewQuery: function NgxIntlTelInputComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.countryList = _t.first);
    } }, inputs: { value: "value", preferredCountries: "preferredCountries", enablePlaceholder: "enablePlaceholder", cssClass: "cssClass", onlyCountries: "onlyCountries", enableAutoCountrySelect: "enableAutoCountrySelect", searchCountryFlag: "searchCountryFlag", searchCountryField: "searchCountryField", searchCountryPlaceholder: "searchCountryPlaceholder", maxLength: "maxLength", selectFirstCountry: "selectFirstCountry", phoneValidation: "phoneValidation", inputId: "inputId", separateDialCode: "separateDialCode", tooltipField: "tooltipField", selectedCountryISO: "selectedCountryISO" }, outputs: { countryChange: "countryChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            CountryCode,
            {
                provide: NG_VALUE_ACCESSOR,
                // tslint:disable-next-line:no-forward-ref
                useExisting: forwardRef(() => NgxIntlTelInputComponent_1),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useValue: ɵ0,
                multi: true
            },
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 9, vars: 15, consts: [[1, "iti", "iti--allow-dropdown", 3, "ngClass"], ["dropdown", "", 1, "iti__flag-container", 3, "ngClass", "isDisabled"], ["dropdownToggle", "", 1, "iti__selected-flag", "dropdown-toggle"], [1, "iti__flag", 3, "ngClass", "tooltip"], ["class", "selected-dial-code", 4, "ngIf"], [1, "iti__arrow"], ["class", "dropdown-menu country-dropdown", 4, "dropdownMenu"], ["type", "tel", "autocomplete", "off", 3, "id", "ngClass", "ngModel", "disabled", "placeholder", "blur", "keypress", "ngModelChange"], ["focusable", ""], [1, "selected-dial-code"], [1, "dropdown-menu", "country-dropdown"], ["class", "search-container", 4, "ngIf"], [1, "iti__country-list"], ["countryList", ""], ["class", "iti__country iti__preferred", 3, "id", "click", 4, "ngFor", "ngForOf"], ["class", "iti__divider", 4, "ngIf"], ["class", "iti__country iti__standard", 3, "id", "click", 4, "ngFor", "ngForOf"], [1, "search-container"], ["id", "country-search-box", "autofocus", "", 3, "ngModel", "placeholder", "ngModelChange", "keyup", "click"], [1, "iti__country", "iti__preferred", 3, "id", "click"], [1, "iti__flag-box"], [1, "iti__flag", 3, "ngClass"], [1, "iti__country-name"], [1, "iti__dial-code"], [1, "iti__divider"], [1, "iti__country", "iti__standard", 3, "id", "click"]], template: function NgxIntlTelInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelement(3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, NgxIntlTelInputComponent_div_4_Template, 2, 1, "div", 4);
        ɵngcc0.ɵɵelement(5, "div", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, NgxIntlTelInputComponent_div_6_Template, 7, 4, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "input", 7, 8);
        ɵngcc0.ɵɵlistener("blur", function NgxIntlTelInputComponent_Template_input_blur_7_listener() { return ctx.onTouched(); })("keypress", function NgxIntlTelInputComponent_Template_input_keypress_7_listener($event) { return ctx.onInputKeyPress($event); })("ngModelChange", function NgxIntlTelInputComponent_Template_input_ngModelChange_7_listener($event) { return ctx.phoneNumber = $event; })("ngModelChange", function NgxIntlTelInputComponent_Template_input_ngModelChange_7_listener() { return ctx.onPhoneNumberChange(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.separateDialCodeClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(13, _c1, ctx.disabled))("isDisabled", ctx.disabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ctx.selectedCountry == null ? null : ctx.selectedCountry.flagClass)("tooltip", ctx.selectedCountry ? ctx.selectedCountry[ctx.tooltipField] : "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.separateDialCode);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("id", ctx.inputId)("ngClass", ctx.cssClass)("ngModel", ctx.phoneNumber)("disabled", ctx.disabled)("placeholder", ctx.separateDialCodePlaceHolder((ctx.selectedCountry == null ? null : ctx.selectedCountry.placeHolder) || ""));
        ɵngcc0.ɵɵattribute("maxLength", ctx.maxLength)("validation", ctx.phoneValidation);
    } }, directives: function () { return [ɵngcc1.NgClass, ɵngcc2.BsDropdownDirective, ɵngcc2.BsDropdownToggleDirective, ɵngcc3.TooltipDirective, ɵngcc1.NgIf, ɵngcc2.BsDropdownMenuDirective, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, NativeElementInjectorDirective, ɵngcc1.NgForOf]; }, styles: ["li.iti__country[_ngcontent-%COMP%]:hover{background-color:rgba(0,0,0,.05)}.iti__selected-flag.dropdown-toggle[_ngcontent-%COMP%]:after{content:none}.iti__flag-container.disabled[_ngcontent-%COMP%]{cursor:default!important}.iti.iti--allow-dropdown[_ngcontent-%COMP%]   .flag-container.disabled[_ngcontent-%COMP%]:hover   .iti__selected-flag[_ngcontent-%COMP%]{background:0 0}.country-dropdown[_ngcontent-%COMP%]{border:1px solid #ccc;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;padding:1px;border-collapse:collapse}.search-container[_ngcontent-%COMP%]{position:relative}.search-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;border:none;border-bottom:1px solid #ccc;padding-left:10px}.search-icon[_ngcontent-%COMP%]{position:absolute;z-index:2;width:25px;margin:1px 10px}.iti__country-list[_ngcontent-%COMP%]{position:relative;border:none}.iti[_ngcontent-%COMP%]   input#country-search-box[_ngcontent-%COMP%]{padding-left:6px}.iti[_ngcontent-%COMP%]   .selected-dial-code[_ngcontent-%COMP%]{margin-left:6px}.iti.separate-dial-code[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%]{width:93px}.iti.separate-dial-code[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{padding-left:98px}"] });
NgxIntlTelInputComponent.ctorParameters = () => [
    { type: CountryCode }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "value", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NgxIntlTelInputComponent.prototype, "preferredCountries", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "enablePlaceholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "cssClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NgxIntlTelInputComponent.prototype, "onlyCountries", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "enableAutoCountrySelect", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "searchCountryFlag", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NgxIntlTelInputComponent.prototype, "searchCountryField", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "searchCountryPlaceholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "maxLength", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NgxIntlTelInputComponent.prototype, "tooltipField", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "selectFirstCountry", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NgxIntlTelInputComponent.prototype, "selectedCountryISO", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "phoneValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "inputId", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "separateDialCode", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NgxIntlTelInputComponent.prototype, "countryChange", void 0);
__decorate([
    ViewChild('countryList'),
    __metadata("design:type", ElementRef)
], NgxIntlTelInputComponent.prototype, "countryList", void 0);
NgxIntlTelInputComponent = NgxIntlTelInputComponent_1 = __decorate([ __metadata("design:paramtypes", [CountryCode])
], NgxIntlTelInputComponent);

/*
"Property 'nativeElement' does not exist on type 'FormControl'".
'NativeElementInjectorDirective' injects nativeElement to each control,
so we can access it from inside validator for example.
More about this approach and reasons for this:
https://github.com/angular/angular/issues/18025
https://stackoverflow.com/a/54075119/1617590
*/
let NativeElementInjectorDirective = class NativeElementInjectorDirective {
    constructor(controlDir, host) {
        this.controlDir = controlDir;
        this.host = host;
    }
    ngOnInit() {
        if (this.controlDir.control) {
            this.controlDir.control['nativeElement'] = this.host.nativeElement;
        }
    }
};
NativeElementInjectorDirective.ɵfac = function NativeElementInjectorDirective_Factory(t) { return new (t || NativeElementInjectorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NativeElementInjectorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NativeElementInjectorDirective, selectors: [["", "ngModel", ""], ["", "formControl", ""], ["", "formControlName", ""]] });
NativeElementInjectorDirective.ctorParameters = () => [
    { type: NgControl },
    { type: ElementRef }
];
NativeElementInjectorDirective = __decorate([ __metadata("design:paramtypes", [NgControl,
        ElementRef])
], NativeElementInjectorDirective);

var NgxIntlTelInputModule_1;
let NgxIntlTelInputModule = NgxIntlTelInputModule_1 = class NgxIntlTelInputModule {
    static forRoot() {
        return {
            ngModule: NgxIntlTelInputModule_1,
            providers: [NgxIntlTelInputService],
        };
    }
};
NgxIntlTelInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxIntlTelInputModule });
NgxIntlTelInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxIntlTelInputModule_Factory(t) { return new (t || NgxIntlTelInputModule)(); }, imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            BsDropdownModule.forRoot(),
            TooltipModule.forRoot(),
        ]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxIntlTelInputService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountryCode, [{
        type: Injectable
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxIntlTelInputComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'ngx-intl-tel-input',
                template: "<div class=\"iti iti--allow-dropdown\"\n\t[ngClass]=\"separateDialCodeClass\">\n\t<div class=\"iti__flag-container\"\n\t\tdropdown\n\t\t[ngClass]=\"{'disabled': disabled}\"\n\t\t[isDisabled]=\"disabled\">\n\t\t<div class=\"iti__selected-flag dropdown-toggle\"\n\t\t\tdropdownToggle>\n\t\t\t<div class=\"iti__flag\"\n\t\t\t\t[ngClass]=\"selectedCountry?.flagClass\"\n\t\t\t\t[tooltip]=\"selectedCountry ? selectedCountry[tooltipField] : ''\"></div>\n\t\t\t<div *ngIf=\"separateDialCode\"\n\t\t\t\tclass=\"selected-dial-code\">+{{selectedCountry.dialCode}}</div>\n\t\t\t<div class=\"iti__arrow\"></div>\n\t\t</div>\n\t\t<div *dropdownMenu\n\t\t\tclass=\"dropdown-menu country-dropdown\">\n\t\t\t<div class=\"search-container\"\n\t\t\t\t*ngIf=\"searchCountryFlag && searchCountryField\">\n\t\t\t\t<input id=\"country-search-box\"\n\t\t\t\t\t[(ngModel)]=\"countrySearchText\"\n\t\t\t\t\t(keyup)=\"searchCountry()\"\n\t\t\t\t\t(click)=\"$event.stopPropagation()\"\n\t\t\t\t\t[placeholder]=\"searchCountryPlaceholder\"\n\t\t\t\t\tautofocus>\n\t\t\t</div>\n\t\t\t<ul class=\"iti__country-list\"\n\t\t\t\t#countryList>\n\t\t\t\t<li class=\"iti__country iti__preferred\"\n\t\t\t\t\t*ngFor=\"let country of preferredCountriesInDropDown\"\n\t\t\t\t\t(click)=\"onCountrySelect(country, focusable)\"\n\t\t\t\t\t[id]=\"country.htmlId+'-preferred'\">\n\t\t\t\t\t<div class=\"iti__flag-box\">\n\t\t\t\t\t\t<div class=\"iti__flag\"\n\t\t\t\t\t\t\t[ngClass]=\"country.flagClass\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<span class=\"iti__country-name\">{{country.name}}</span>\n\t\t\t\t\t<span class=\"iti__dial-code\">+{{country.dialCode}}</span>\n\t\t\t\t</li>\n\t\t\t\t<li class=\"iti__divider\"\n\t\t\t\t\t*ngIf=\"preferredCountriesInDropDown?.length\"></li>\n\t\t\t\t<li class=\"iti__country iti__standard\"\n\t\t\t\t\t*ngFor=\"let country of allCountries\"\n\t\t\t\t\t(click)=\"onCountrySelect(country, focusable)\"\n\t\t\t\t\t[id]=\"country.htmlId\">\n\t\t\t\t\t<div class=\"iti__flag-box\">\n\t\t\t\t\t\t<div class=\"iti__flag\"\n\t\t\t\t\t\t\t[ngClass]=\"country.flagClass\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<span class=\"iti__country-name\">{{country.name}}</span>\n\t\t\t\t\t<span class=\"iti__dial-code\">+{{country.dialCode}}</span>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\t<input type=\"tel\"\n\t\t[id]=\"inputId\"\n\t\tautocomplete=\"off\"\n\t\t[ngClass]=\"cssClass\"\n\t\t(blur)=\"onTouched()\"\n\t\t(keypress)=\"onInputKeyPress($event)\"\n\t\t[(ngModel)]=\"phoneNumber\"\n\t\t(ngModelChange)=\"onPhoneNumberChange()\"\n\t\t[disabled]=\"disabled\"\n\t\t[placeholder]=\"separateDialCodePlaceHolder(selectedCountry?.placeHolder || '')\"\n\t\t[attr.maxLength]=\"maxLength\"\n\t\t[attr.validation]=\"phoneValidation\"\n\t\t#focusable>\n</div>",
                providers: [
                    CountryCode,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => NgxIntlTelInputComponent_1),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useValue: ɵ0,
                        multi: true
                    },
                ],
                styles: ["li.iti__country:hover{background-color:rgba(0,0,0,.05)}.iti__selected-flag.dropdown-toggle:after{content:none}.iti__flag-container.disabled{cursor:default!important}.iti.iti--allow-dropdown .flag-container.disabled:hover .iti__selected-flag{background:0 0}.country-dropdown{border:1px solid #ccc;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;padding:1px;border-collapse:collapse}.search-container{position:relative}.search-container input{width:100%;border:none;border-bottom:1px solid #ccc;padding-left:10px}.search-icon{position:absolute;z-index:2;width:25px;margin:1px 10px}.iti__country-list{position:relative;border:none}.iti input#country-search-box{padding-left:6px}.iti .selected-dial-code{margin-left:6px}.iti.separate-dial-code .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2 .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3 .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4 .iti__selected-flag{width:93px}.iti.separate-dial-code input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2 input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3 input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4 input{padding-left:98px}"]
            }]
    }], function () { return [{ type: CountryCode }]; }, { value: [{
            type: Input
        }], preferredCountries: [{
            type: Input
        }], enablePlaceholder: [{
            type: Input
        }], cssClass: [{
            type: Input
        }], onlyCountries: [{
            type: Input
        }], enableAutoCountrySelect: [{
            type: Input
        }], searchCountryFlag: [{
            type: Input
        }], searchCountryField: [{
            type: Input
        }], searchCountryPlaceholder: [{
            type: Input
        }], maxLength: [{
            type: Input
        }], selectFirstCountry: [{
            type: Input
        }], phoneValidation: [{
            type: Input
        }], inputId: [{
            type: Input
        }], separateDialCode: [{
            type: Input
        }], countryChange: [{
            type: Output
        }], tooltipField: [{
            type: Input
        }], selectedCountryISO: [{
            type: Input
        }], countryList: [{
            type: ViewChild,
            args: ['countryList']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NativeElementInjectorDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line: directive-selector
                selector: '[ngModel], [formControl], [formControlName]'
            }]
    }], function () { return [{ type: ɵngcc4.NgControl }, { type: ɵngcc0.ElementRef }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxIntlTelInputModule, { declarations: function () { return [NgxIntlTelInputComponent,
        NativeElementInjectorDirective]; }, imports: function () { return [CommonModule,
        FormsModule,
        ReactiveFormsModule, ɵngcc2.BsDropdownModule, ɵngcc3.TooltipModule]; }, exports: function () { return [NgxIntlTelInputComponent,
        NativeElementInjectorDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxIntlTelInputModule, [{
        type: NgModule,
        args: [{
                declarations: [NgxIntlTelInputComponent, NativeElementInjectorDirective],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    BsDropdownModule.forRoot(),
                    TooltipModule.forRoot(),
                ],
                exports: [NgxIntlTelInputComponent, NativeElementInjectorDirective]
            }]
    }], null, null); })();

/*
 * Public API Surface of ngx-intl-tel-input
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CountryISO, NativeElementInjectorDirective, NgxIntlTelInputComponent, NgxIntlTelInputModule, NgxIntlTelInputService, SearchCountryField, TooltipLabel, ɵ0, CountryCode as ɵa, phoneNumberValidator as ɵb };

//# sourceMappingURL=ngx-intl-tel-input.js.map