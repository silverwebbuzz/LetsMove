import * as lpn from 'google-libphonenumber';
/*
We use "control: any" instead of "control: FormControl" to silence:
"Property 'nativeElement' does not exist on type 'FormControl'".
This happens because I've expanded control with nativeElement via
'NativeElementInjectorDirective' to get an access to the element.
More about this approach and reasons for this:
https://github.com/angular/angular/issues/18025
https://stackoverflow.com/a/54075119/1617590
*/
export const phoneNumberValidator = (control) => {
    if (!control.value) {
        return;
    }
    // Find <input> inside injected nativeElement and get its "id".
    const el = control.nativeElement;
    const inputBox = el
        ? el.querySelector('input[type="tel"]')
        : undefined;
    if (inputBox) {
        const id = inputBox.id;
        const isCheckValidation = inputBox.getAttribute('validation');
        if (isCheckValidation === 'true') {
            const isRequired = control.errors && control.errors.required === true;
            const error = { validatePhoneNumber: { valid: false } };
            inputBox.setCustomValidity('Invalid field.');
            let number;
            try {
                number = lpn.PhoneNumberUtil.getInstance().parse(control.value.number, control.value.countryCode);
            }
            catch (e) {
                if (isRequired === true) {
                    return error;
                }
                else {
                    inputBox.setCustomValidity('');
                }
            }
            if (control.value) {
                if (!number) {
                    return error;
                }
                else {
                    if (!lpn.PhoneNumberUtil.getInstance().isValidNumberForRegion(number, control.value.countryCode)) {
                        return error;
                    }
                    else {
                        inputBox.setCustomValidity('');
                    }
                }
            }
        }
        else if (isCheckValidation === 'false') {
            inputBox.setCustomValidity('');
            control.clearValidators();
        }
    }
    return;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWludGwtdGVsLWlucHV0LnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbnRsLXRlbC1pbnB1dC8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtaW50bC10ZWwtaW5wdXQudmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxHQUFHLE1BQU0sdUJBQXVCLENBQUM7QUFFN0M7Ozs7Ozs7O0VBUUU7QUFDRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLE9BQVksRUFBRSxFQUFFO0lBQ3BELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1FBQ25CLE9BQU87S0FDUDtJQUNELCtEQUErRDtJQUMvRCxNQUFNLEVBQUUsR0FBZ0IsT0FBTyxDQUFDLGFBQTRCLENBQUM7SUFDN0QsTUFBTSxRQUFRLEdBQXFCLEVBQUU7UUFDcEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUM7UUFDdkMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNiLElBQUksUUFBUSxFQUFFO1FBQ2IsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUN2QixNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDOUQsSUFBSSxpQkFBaUIsS0FBSyxNQUFNLEVBQUU7WUFDakMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUM7WUFDdEUsTUFBTSxLQUFLLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBRXhELFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRTdDLElBQUksTUFBdUIsQ0FBQztZQUU1QixJQUFJO2dCQUNILE1BQU0sR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FDL0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUN6QixDQUFDO2FBQ0Y7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDWCxJQUFJLFVBQVUsS0FBSyxJQUFJLEVBQUU7b0JBQ3hCLE9BQU8sS0FBSyxDQUFDO2lCQUNiO3FCQUFNO29CQUNOLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDL0I7YUFDRDtZQUVELElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFDbEIsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDWixPQUFPLEtBQUssQ0FBQztpQkFDYjtxQkFBTTtvQkFDTixJQUNDLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxzQkFBc0IsQ0FDeEQsTUFBTSxFQUNOLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUN6QixFQUNBO3dCQUNELE9BQU8sS0FBSyxDQUFDO3FCQUNiO3lCQUFNO3dCQUNOLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztxQkFDL0I7aUJBQ0Q7YUFDRDtTQUNEO2FBQU0sSUFBSSxpQkFBaUIsS0FBSyxPQUFPLEVBQUU7WUFDekMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRS9CLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUMxQjtLQUNEO0lBQ0QsT0FBTztBQUNSLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGxwbiBmcm9tICdnb29nbGUtbGlicGhvbmVudW1iZXInO1xuXG4vKlxuV2UgdXNlIFwiY29udHJvbDogYW55XCIgaW5zdGVhZCBvZiBcImNvbnRyb2w6IEZvcm1Db250cm9sXCIgdG8gc2lsZW5jZTpcblwiUHJvcGVydHkgJ25hdGl2ZUVsZW1lbnQnIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgJ0Zvcm1Db250cm9sJ1wiLlxuVGhpcyBoYXBwZW5zIGJlY2F1c2UgSSd2ZSBleHBhbmRlZCBjb250cm9sIHdpdGggbmF0aXZlRWxlbWVudCB2aWFcbidOYXRpdmVFbGVtZW50SW5qZWN0b3JEaXJlY3RpdmUnIHRvIGdldCBhbiBhY2Nlc3MgdG8gdGhlIGVsZW1lbnQuXG5Nb3JlIGFib3V0IHRoaXMgYXBwcm9hY2ggYW5kIHJlYXNvbnMgZm9yIHRoaXM6XG5odHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xODAyNVxuaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzU0MDc1MTE5LzE2MTc1OTBcbiovXG5leHBvcnQgY29uc3QgcGhvbmVOdW1iZXJWYWxpZGF0b3IgPSAoY29udHJvbDogYW55KSA9PiB7XG5cdGlmICghY29udHJvbC52YWx1ZSkge1xuXHRcdHJldHVybjtcblx0fVxuXHQvLyBGaW5kIDxpbnB1dD4gaW5zaWRlIGluamVjdGVkIG5hdGl2ZUVsZW1lbnQgYW5kIGdldCBpdHMgXCJpZFwiLlxuXHRjb25zdCBlbDogSFRNTEVsZW1lbnQgPSBjb250cm9sLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG5cdGNvbnN0IGlucHV0Qm94OiBIVE1MSW5wdXRFbGVtZW50ID0gZWxcblx0XHQ/IGVsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJ0ZWxcIl0nKVxuXHRcdDogdW5kZWZpbmVkO1xuXHRpZiAoaW5wdXRCb3gpIHtcblx0XHRjb25zdCBpZCA9IGlucHV0Qm94LmlkO1xuXHRcdGNvbnN0IGlzQ2hlY2tWYWxpZGF0aW9uID0gaW5wdXRCb3guZ2V0QXR0cmlidXRlKCd2YWxpZGF0aW9uJyk7XG5cdFx0aWYgKGlzQ2hlY2tWYWxpZGF0aW9uID09PSAndHJ1ZScpIHtcblx0XHRcdGNvbnN0IGlzUmVxdWlyZWQgPSBjb250cm9sLmVycm9ycyAmJiBjb250cm9sLmVycm9ycy5yZXF1aXJlZCA9PT0gdHJ1ZTtcblx0XHRcdGNvbnN0IGVycm9yID0geyB2YWxpZGF0ZVBob25lTnVtYmVyOiB7IHZhbGlkOiBmYWxzZSB9IH07XG5cblx0XHRcdGlucHV0Qm94LnNldEN1c3RvbVZhbGlkaXR5KCdJbnZhbGlkIGZpZWxkLicpO1xuXG5cdFx0XHRsZXQgbnVtYmVyOiBscG4uUGhvbmVOdW1iZXI7XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdG51bWJlciA9IGxwbi5QaG9uZU51bWJlclV0aWwuZ2V0SW5zdGFuY2UoKS5wYXJzZShcblx0XHRcdFx0XHRjb250cm9sLnZhbHVlLm51bWJlcixcblx0XHRcdFx0XHRjb250cm9sLnZhbHVlLmNvdW50cnlDb2RlXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGlmIChpc1JlcXVpcmVkID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVycm9yO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlucHV0Qm94LnNldEN1c3RvbVZhbGlkaXR5KCcnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY29udHJvbC52YWx1ZSkge1xuXHRcdFx0XHRpZiAoIW51bWJlcikge1xuXHRcdFx0XHRcdHJldHVybiBlcnJvcjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHQhbHBuLlBob25lTnVtYmVyVXRpbC5nZXRJbnN0YW5jZSgpLmlzVmFsaWROdW1iZXJGb3JSZWdpb24oXG5cdFx0XHRcdFx0XHRcdG51bWJlcixcblx0XHRcdFx0XHRcdFx0Y29udHJvbC52YWx1ZS5jb3VudHJ5Q29kZVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVycm9yO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpbnB1dEJveC5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChpc0NoZWNrVmFsaWRhdGlvbiA9PT0gJ2ZhbHNlJykge1xuXHRcdFx0aW5wdXRCb3guc2V0Q3VzdG9tVmFsaWRpdHkoJycpO1xuXG5cdFx0XHRjb250cm9sLmNsZWFyVmFsaWRhdG9ycygpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm47XG59O1xuIl19