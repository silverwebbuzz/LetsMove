import * as lpn from 'google-libphonenumber';
/*
We use "control: any" instead of "control: FormControl" to silence:
"Property 'nativeElement' does not exist on type 'FormControl'".
This happens because I've expanded control with nativeElement via
'NativeElementInjectorDirective' to get an access to the element.
More about this approach and reasons for this:
https://github.com/angular/angular/issues/18025
https://stackoverflow.com/a/54075119/1617590
*/
export var phoneNumberValidator = function (control) {
    if (!control.value) {
        return;
    }
    // Find <input> inside injected nativeElement and get its "id".
    var el = control.nativeElement;
    var inputBox = el
        ? el.querySelector('input[type="tel"]')
        : undefined;
    if (inputBox) {
        var id = inputBox.id;
        var isCheckValidation = inputBox.getAttribute('validation');
        if (isCheckValidation === 'true') {
            var isRequired = control.errors && control.errors.required === true;
            var error = { validatePhoneNumber: { valid: false } };
            inputBox.setCustomValidity('Invalid field.');
            var number = void 0;
            try {
                number = lpn.PhoneNumberUtil.getInstance().parse(control.value.number, control.value.countryCode);
            }
            catch (e) {
                if (isRequired === true) {
                    return error;
                }
                else {
                    inputBox.setCustomValidity('');
                }
            }
            if (control.value) {
                if (!number) {
                    return error;
                }
                else {
                    if (!lpn.PhoneNumberUtil.getInstance().isValidNumberForRegion(number, control.value.countryCode)) {
                        return error;
                    }
                    else {
                        inputBox.setCustomValidity('');
                    }
                }
            }
        }
        else if (isCheckValidation === 'false') {
            inputBox.setCustomValidity('');
            control.clearValidators();
        }
    }
    return;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWludGwtdGVsLWlucHV0LnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbnRsLXRlbC1pbnB1dC8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtaW50bC10ZWwtaW5wdXQudmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxHQUFHLE1BQU0sdUJBQXVCLENBQUM7QUFFN0M7Ozs7Ozs7O0VBUUU7QUFDRixNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRyxVQUFDLE9BQVk7SUFDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7UUFDbkIsT0FBTztLQUNQO0lBQ0QsK0RBQStEO0lBQy9ELElBQU0sRUFBRSxHQUFnQixPQUFPLENBQUMsYUFBNEIsQ0FBQztJQUM3RCxJQUFNLFFBQVEsR0FBcUIsRUFBRTtRQUNwQyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQztRQUN2QyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ2IsSUFBSSxRQUFRLEVBQUU7UUFDYixJQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLElBQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5RCxJQUFJLGlCQUFpQixLQUFLLE1BQU0sRUFBRTtZQUNqQyxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQztZQUN0RSxJQUFNLEtBQUssR0FBRyxFQUFFLG1CQUFtQixFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUM7WUFFeEQsUUFBUSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFFN0MsSUFBSSxNQUFNLFNBQWlCLENBQUM7WUFFNUIsSUFBSTtnQkFDSCxNQUFNLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQy9DLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDekIsQ0FBQzthQUNGO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1gsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFO29CQUN4QixPQUFPLEtBQUssQ0FBQztpQkFDYjtxQkFBTTtvQkFDTixRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQy9CO2FBQ0Q7WUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ1osT0FBTyxLQUFLLENBQUM7aUJBQ2I7cUJBQU07b0JBQ04sSUFDQyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUMsc0JBQXNCLENBQ3hELE1BQU0sRUFDTixPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDekIsRUFDQTt3QkFDRCxPQUFPLEtBQUssQ0FBQztxQkFDYjt5QkFBTTt3QkFDTixRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7cUJBQy9CO2lCQUNEO2FBQ0Q7U0FDRDthQUFNLElBQUksaUJBQWlCLEtBQUssT0FBTyxFQUFFO1lBQ3pDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUUvQixPQUFPLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDMUI7S0FDRDtJQUNELE9BQU87QUFDUixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBscG4gZnJvbSAnZ29vZ2xlLWxpYnBob25lbnVtYmVyJztcblxuLypcbldlIHVzZSBcImNvbnRyb2w6IGFueVwiIGluc3RlYWQgb2YgXCJjb250cm9sOiBGb3JtQ29udHJvbFwiIHRvIHNpbGVuY2U6XG5cIlByb3BlcnR5ICduYXRpdmVFbGVtZW50JyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICdGb3JtQ29udHJvbCdcIi5cblRoaXMgaGFwcGVucyBiZWNhdXNlIEkndmUgZXhwYW5kZWQgY29udHJvbCB3aXRoIG5hdGl2ZUVsZW1lbnQgdmlhXG4nTmF0aXZlRWxlbWVudEluamVjdG9yRGlyZWN0aXZlJyB0byBnZXQgYW4gYWNjZXNzIHRvIHRoZSBlbGVtZW50LlxuTW9yZSBhYm91dCB0aGlzIGFwcHJvYWNoIGFuZCByZWFzb25zIGZvciB0aGlzOlxuaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTgwMjVcbmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81NDA3NTExOS8xNjE3NTkwXG4qL1xuZXhwb3J0IGNvbnN0IHBob25lTnVtYmVyVmFsaWRhdG9yID0gKGNvbnRyb2w6IGFueSkgPT4ge1xuXHRpZiAoIWNvbnRyb2wudmFsdWUpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0Ly8gRmluZCA8aW5wdXQ+IGluc2lkZSBpbmplY3RlZCBuYXRpdmVFbGVtZW50IGFuZCBnZXQgaXRzIFwiaWRcIi5cblx0Y29uc3QgZWw6IEhUTUxFbGVtZW50ID0gY29udHJvbC5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuXHRjb25zdCBpbnB1dEJveDogSFRNTElucHV0RWxlbWVudCA9IGVsXG5cdFx0PyBlbC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwidGVsXCJdJylcblx0XHQ6IHVuZGVmaW5lZDtcblx0aWYgKGlucHV0Qm94KSB7XG5cdFx0Y29uc3QgaWQgPSBpbnB1dEJveC5pZDtcblx0XHRjb25zdCBpc0NoZWNrVmFsaWRhdGlvbiA9IGlucHV0Qm94LmdldEF0dHJpYnV0ZSgndmFsaWRhdGlvbicpO1xuXHRcdGlmIChpc0NoZWNrVmFsaWRhdGlvbiA9PT0gJ3RydWUnKSB7XG5cdFx0XHRjb25zdCBpc1JlcXVpcmVkID0gY29udHJvbC5lcnJvcnMgJiYgY29udHJvbC5lcnJvcnMucmVxdWlyZWQgPT09IHRydWU7XG5cdFx0XHRjb25zdCBlcnJvciA9IHsgdmFsaWRhdGVQaG9uZU51bWJlcjogeyB2YWxpZDogZmFsc2UgfSB9O1xuXG5cdFx0XHRpbnB1dEJveC5zZXRDdXN0b21WYWxpZGl0eSgnSW52YWxpZCBmaWVsZC4nKTtcblxuXHRcdFx0bGV0IG51bWJlcjogbHBuLlBob25lTnVtYmVyO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRudW1iZXIgPSBscG4uUGhvbmVOdW1iZXJVdGlsLmdldEluc3RhbmNlKCkucGFyc2UoXG5cdFx0XHRcdFx0Y29udHJvbC52YWx1ZS5udW1iZXIsXG5cdFx0XHRcdFx0Y29udHJvbC52YWx1ZS5jb3VudHJ5Q29kZVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRpZiAoaXNSZXF1aXJlZCA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdHJldHVybiBlcnJvcjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpbnB1dEJveC5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGNvbnRyb2wudmFsdWUpIHtcblx0XHRcdFx0aWYgKCFudW1iZXIpIHtcblx0XHRcdFx0XHRyZXR1cm4gZXJyb3I7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0IWxwbi5QaG9uZU51bWJlclV0aWwuZ2V0SW5zdGFuY2UoKS5pc1ZhbGlkTnVtYmVyRm9yUmVnaW9uKFxuXHRcdFx0XHRcdFx0XHRudW1iZXIsXG5cdFx0XHRcdFx0XHRcdGNvbnRyb2wudmFsdWUuY291bnRyeUNvZGVcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlcnJvcjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aW5wdXRCb3guc2V0Q3VzdG9tVmFsaWRpdHkoJycpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoaXNDaGVja1ZhbGlkYXRpb24gPT09ICdmYWxzZScpIHtcblx0XHRcdGlucHV0Qm94LnNldEN1c3RvbVZhbGlkaXR5KCcnKTtcblxuXHRcdFx0Y29udHJvbC5jbGVhclZhbGlkYXRvcnMoKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuO1xufTtcbiJdfQ==