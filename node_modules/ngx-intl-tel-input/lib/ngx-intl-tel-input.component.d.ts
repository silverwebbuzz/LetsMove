import { ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { CountryCode } from './data/country-code';
import { CountryISO } from './enums/country-iso.enum';
import { SearchCountryField } from './enums/search-country-field.enum';
import { TooltipLabel } from './enums/tooltip-label.enum';
import { ChangeData } from './interfaces/change-data';
import { Country } from './model/country.model';
import * as ɵngcc0 from '@angular/core';
export declare class NgxIntlTelInputComponent implements OnInit, OnChanges {
    private countryCodeData;
    value: string;
    preferredCountries: Array<string>;
    enablePlaceholder: boolean;
    cssClass: string;
    onlyCountries: Array<string>;
    enableAutoCountrySelect: boolean;
    searchCountryFlag: boolean;
    searchCountryField: SearchCountryField[];
    searchCountryPlaceholder: string;
    maxLength: string;
    tooltipField: TooltipLabel;
    selectFirstCountry: boolean;
    selectedCountryISO: CountryISO;
    phoneValidation: boolean;
    inputId: string;
    separateDialCode: boolean;
    separateDialCodeClass: string;
    readonly countryChange: EventEmitter<Country>;
    selectedCountry: Country;
    phoneNumber: string;
    allCountries: Array<Country>;
    preferredCountriesInDropDown: Array<Country>;
    phoneUtil: any;
    disabled: boolean;
    errors: Array<any>;
    countrySearchText: string;
    countryList: ElementRef;
    onTouched: () => void;
    propagateChange: (_: ChangeData) => void;
    constructor(countryCodeData: CountryCode);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    init(): void;
    getPreferredCountries(): void;
    getSelectedCountry(): void;
    setSelectedCountry(country: Country): void;
    /**
     * Search country based on country name, iso2, dialCode or all of them.
     */
    searchCountry(): void;
    onPhoneNumberChange(): void;
    onCountrySelect(country: Country, el: any): void;
    onInputKeyPress(event: KeyboardEvent): void;
    protected fetchCountryData(): void;
    protected getPhoneNumberPlaceHolder(countryCode: string): string;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(obj: any): void;
    private getCountryIsoCode;
    separateDialCodePlaceHolder(placeholder: string): string;
    private removeDialCode;
    private checkSeparateDialCodeStyle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxIntlTelInputComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxIntlTelInputComponent, "ngx-intl-tel-input", never, { "value": "value"; "preferredCountries": "preferredCountries"; "enablePlaceholder": "enablePlaceholder"; "cssClass": "cssClass"; "onlyCountries": "onlyCountries"; "enableAutoCountrySelect": "enableAutoCountrySelect"; "searchCountryFlag": "searchCountryFlag"; "searchCountryField": "searchCountryField"; "searchCountryPlaceholder": "searchCountryPlaceholder"; "maxLength": "maxLength"; "selectFirstCountry": "selectFirstCountry"; "phoneValidation": "phoneValidation"; "inputId": "inputId"; "separateDialCode": "separateDialCode"; "tooltipField": "tooltipField"; "selectedCountryISO": "selectedCountryISO"; }, { "countryChange": "countryChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWludGwtdGVsLWlucHV0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3gtaW50bC10ZWwtaW5wdXQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ291bnRyeUNvZGUgfSBmcm9tICcuL2RhdGEvY291bnRyeS1jb2RlJztcbmltcG9ydCB7IENvdW50cnlJU08gfSBmcm9tICcuL2VudW1zL2NvdW50cnktaXNvLmVudW0nO1xuaW1wb3J0IHsgU2VhcmNoQ291bnRyeUZpZWxkIH0gZnJvbSAnLi9lbnVtcy9zZWFyY2gtY291bnRyeS1maWVsZC5lbnVtJztcbmltcG9ydCB7IFRvb2x0aXBMYWJlbCB9IGZyb20gJy4vZW51bXMvdG9vbHRpcC1sYWJlbC5lbnVtJztcbmltcG9ydCB7IENoYW5nZURhdGEgfSBmcm9tICcuL2ludGVyZmFjZXMvY2hhbmdlLWRhdGEnO1xuaW1wb3J0IHsgQ291bnRyeSB9IGZyb20gJy4vbW9kZWwvY291bnRyeS5tb2RlbCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hJbnRsVGVsSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBjb3VudHJ5Q29kZURhdGE7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICBwcmVmZXJyZWRDb3VudHJpZXM6IEFycmF5PHN0cmluZz47XG4gICAgZW5hYmxlUGxhY2Vob2xkZXI6IGJvb2xlYW47XG4gICAgY3NzQ2xhc3M6IHN0cmluZztcbiAgICBvbmx5Q291bnRyaWVzOiBBcnJheTxzdHJpbmc+O1xuICAgIGVuYWJsZUF1dG9Db3VudHJ5U2VsZWN0OiBib29sZWFuO1xuICAgIHNlYXJjaENvdW50cnlGbGFnOiBib29sZWFuO1xuICAgIHNlYXJjaENvdW50cnlGaWVsZDogU2VhcmNoQ291bnRyeUZpZWxkW107XG4gICAgc2VhcmNoQ291bnRyeVBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgbWF4TGVuZ3RoOiBzdHJpbmc7XG4gICAgdG9vbHRpcEZpZWxkOiBUb29sdGlwTGFiZWw7XG4gICAgc2VsZWN0Rmlyc3RDb3VudHJ5OiBib29sZWFuO1xuICAgIHNlbGVjdGVkQ291bnRyeUlTTzogQ291bnRyeUlTTztcbiAgICBwaG9uZVZhbGlkYXRpb246IGJvb2xlYW47XG4gICAgaW5wdXRJZDogc3RyaW5nO1xuICAgIHNlcGFyYXRlRGlhbENvZGU6IGJvb2xlYW47XG4gICAgc2VwYXJhdGVEaWFsQ29kZUNsYXNzOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgY291bnRyeUNoYW5nZTogRXZlbnRFbWl0dGVyPENvdW50cnk+O1xuICAgIHNlbGVjdGVkQ291bnRyeTogQ291bnRyeTtcbiAgICBwaG9uZU51bWJlcjogc3RyaW5nO1xuICAgIGFsbENvdW50cmllczogQXJyYXk8Q291bnRyeT47XG4gICAgcHJlZmVycmVkQ291bnRyaWVzSW5Ecm9wRG93bjogQXJyYXk8Q291bnRyeT47XG4gICAgcGhvbmVVdGlsOiBhbnk7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgZXJyb3JzOiBBcnJheTxhbnk+O1xuICAgIGNvdW50cnlTZWFyY2hUZXh0OiBzdHJpbmc7XG4gICAgY291bnRyeUxpc3Q6IEVsZW1lbnRSZWY7XG4gICAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xuICAgIHByb3BhZ2F0ZUNoYW5nZTogKF86IENoYW5nZURhdGEpID0+IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoY291bnRyeUNvZGVEYXRhOiBDb3VudHJ5Q29kZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBpbml0KCk6IHZvaWQ7XG4gICAgZ2V0UHJlZmVycmVkQ291bnRyaWVzKCk6IHZvaWQ7XG4gICAgZ2V0U2VsZWN0ZWRDb3VudHJ5KCk6IHZvaWQ7XG4gICAgc2V0U2VsZWN0ZWRDb3VudHJ5KGNvdW50cnk6IENvdW50cnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNlYXJjaCBjb3VudHJ5IGJhc2VkIG9uIGNvdW50cnkgbmFtZSwgaXNvMiwgZGlhbENvZGUgb3IgYWxsIG9mIHRoZW0uXG4gICAgICovXG4gICAgc2VhcmNoQ291bnRyeSgpOiB2b2lkO1xuICAgIG9uUGhvbmVOdW1iZXJDaGFuZ2UoKTogdm9pZDtcbiAgICBvbkNvdW50cnlTZWxlY3QoY291bnRyeTogQ291bnRyeSwgZWw6IGFueSk6IHZvaWQ7XG4gICAgb25JbnB1dEtleVByZXNzKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZmV0Y2hDb3VudHJ5RGF0YSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBnZXRQaG9uZU51bWJlclBsYWNlSG9sZGVyKGNvdW50cnlDb2RlOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUob2JqOiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgZ2V0Q291bnRyeUlzb0NvZGU7XG4gICAgc2VwYXJhdGVEaWFsQ29kZVBsYWNlSG9sZGVyKHBsYWNlaG9sZGVyOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZW1vdmVEaWFsQ29kZTtcbiAgICBwcml2YXRlIGNoZWNrU2VwYXJhdGVEaWFsQ29kZVN0eWxlO1xufVxuIl19